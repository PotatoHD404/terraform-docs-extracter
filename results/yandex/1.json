[
    "// Configure the Yandex.Cloud provider\nprovider \"yandex\" {\n  token                    = \"auth_token_here\"\n  service_account_key_file = \"path_to_service_account_key_file\"\n  cloud_id                 = \"cloud_id_here\"\n  folder_id                = \"folder_id_here\"\n  zone                     = \"ru-central1-a\"\n}\n\n// Create a new instance\nresource \"yandex_compute_instance\" \"default\" {\n  // ...\n}\n",
    "data \"yandex_alb_backend_group\" \"foo\" {\n  backend_group_id = \"my-backend-group-id\"\n}\n",
    "data \"yandex_alb_http_router\" \"tf-router\" {\n  http_router_id = \"my-http-router-id\"\n}\n",
    "data \"yandex_alb_load_balancer\" \"tf-alb-data\" {\n  load_balancer_id = \"my-alb-id\"\n}\n",
    "data \"yandex_alb_target_group\" \"foo\" {\n  target_group_id = \"my-target-group-id\"\n}\n",
    "data \"yandex_alb_virtual_host\" \"my-vh-data\" {\n  name = yandex_alb_virtual_host.my-vh.name\n  http_router_id = yandex_alb_virtual_host.my-router.id\n}\n",
    "data \"yandex_api_gateway\" \"my-api-gateway\" {\n  name = \"my-api-gateway\"\n}\n",
    "data \"yandex_billing_cloud_binding\" \"foo\" {\n  billing_account_id = \"foo-ba-id\"\n  cloud_id = \"foo-cloud-id\"\n}\n\noutput \"bound_cloud_id\" {\n  value = \"${data.yandex_billing_cloud_binding.foo.cloud_id}\"\n}\n",
    "data \"yandex_cdn_origin_group\" \"my_group\" {\n  origin_group_id = \"some_instance_id\"\n}\n\noutput \"origin_group_name\" {\n  value = \"${data.yandex_cdn_origin_group.my_group.name}\"\n}\n",
    "data \"yandex_cdn_resource\" \"my_resource\" {\n    resource_id = \"some resource id\"\n}\n\noutput \"resource_cname\" {\n  value = \"${data.yandex_cdn_resource.my_resource.cname}\"\n}\n",
    "data \"yandex_client_config\" \"client\" {}\n\ndata \"yandex_kubernetes_cluster\" \"kubernetes\" {\n  name = \"kubernetes\"\n}\n\nprovider \"kubernetes\" {\n  load_config_file = false\n\n  host                   = data.yandex_kubernetes_cluster.kubernetes.master.0.external_v4_endpoint\n  cluster_ca_certificate = data.yandex_kubernetes_cluster.kubernetes.master.0.cluster_ca_certificate\n  token                  = data.yandex_client_config.client.iam_token\n}\n",
    "data \"yandex_cm_certificate\" \"example_by_id\" {\n  certificate_id = \"certificate-id\"\n}\n\ndata \"yandex_cm_certificate\" \"example_by_name\" {\n  folder_id = \"folder-id\"\n  name      = \"example\"\n}\n",
    "resource \"yandex_cm_certificate\" \"example\" {\n  name    = \"example\"\n  domains = [\"example.com\", \"*.example.com\"]\n\n  managed {\n    challenge_type  = \"DNS_CNAME\"\n    challenge_count = 1 # \"example.com\" and \"*.example.com\" has the same challenge\n  }\n}\n\nresource \"yandex_dns_recordset\" \"example\" {\n  count   = yandex_cm_certificate.example.managed[0].challenge_count\n  zone_id = \"example-zone-id\"\n  name    = yandex_cm_certificate.example.challenges[count.index].dns_name\n  type    = yandex_cm_certificate.example.challenges[count.index].dns_type\n  data    = [yandex_cm_certificate.example.challenges[count.index].dns_value]\n  ttl     = 60\n}\n\ndata \"yandex_cm_certificate\" \"example\" {\n  depends_on      = [yandex_dns_recordset.example]\n  certificate_id  = yandex_cm_certificate.example.id\n  wait_validation = true\n}\n\n# Use data.yandex_cm_certificate.example.id to get validated certificate\n",
    "data \"yandex_cm_certificate_content\" \"example_by_id\" {\n  certificate_id = \"certificate-id\"\n}\n\ndata \"yandex_cm_certificate_content\" \"example_by_name\" {\n  folder_id = \"folder-id\"\n  name      = \"example\"\n}\n",
    "data \"yandex_compute_disk\" \"my_disk\" {\n  disk_id = \"some_disk_id\"\n}\n\nresource \"yandex_compute_instance\" \"default\" {\n  // ...\n\n  secondary_disk {\n    disk_id = \"${data.yandex_compute_disk.my_disk.id}\"\n  }\n}\n",
    "data \"yandex_compute_disk_placement_group\" \"my_group\" {\n  group_id = \"some_group_id\"\n}\n\noutput \"placement_group_name\" {\n  value = \"${data.yandex_compute_disk_placement_group.my_group.name}\"\n}\n",
    "data \"yandex_compute_filesystem\" \"my_fs\" {\n  filesystem_id = \"some_fs_id\"\n}\n\nresource \"yandex_compute_instance\" \"default\" {\n  // ...\n\n  filesystem {\n    filesystem_id = \"${data.yandex_compute_filesystem.my_fs.id}\"\n  }\n}\n",
    "data \"yandex_compute_gpu_cluster\" \"my_gpu_cluster\" {\n  gpu_cluster_id = \"some_gpu_cluster_id\"\n}\n\nresource \"yandex_compute_instance\" \"default\" {\n  // ...\n\n  gpu_cluster_id = data.yandex_compute_gpu_cluster.my_gpu_cluster.id\n\n}\n",
    "data \"yandex_compute_image\" \"my_image\" {\n  family = \"ubuntu-1804-lts\"\n}\n\nresource \"yandex_compute_instance\" \"default\" {\n  // ...\n\n  boot_disk {\n    initialize_params {\n      image_id = \"${data.yandex_compute_image.my_image.id}\"\n    }\n  }\n  // ...\n  lifecycle {\n    ignore_changes = [boot_disk[0].initialize_params[0].image_id]\n  }\n}\n",
    "data \"yandex_compute_instance\" \"my_instance\" {\n  instance_id = \"some_instance_id\"\n}\n\noutput \"instance_external_ip\" {\n  value = \"${data.yandex_compute_instance.my_instance.network_interface.0.nat_ip_address}\"\n}\n",
    "data \"yandex_compute_instance_group\" \"my_group\" {\n  instance_group_id = \"some_instance_group_id\"\n}\n\noutput \"instance_external_ip\" {\n  value = \"${data.yandex_compute_instance_group.my_group.instances.*.network_interface.0.nat_ip_address}\"\n}\n",
    "data \"yandex_compute_placement_group\" \"my_group\" {\n  group_id = \"some_group_id\"\n}\n\noutput \"placement_group_name\" {\n  value = \"${data.yandex_compute_placement_group.my_group.name}\"\n}\n",
    "data \"yandex_compute_snapshot\" \"my_snapshot\" {\n  snapshot_id = \"some_snapshot_id\"\n}\n\nresource \"yandex_compute_instance\" \"default\" {\n  // ...\n\n  boot_disk {\n    initialize_params {\n      snapshot_id = \"${data.yandex_compute_snapshot.my_snapshot.id}\"\n    }\n  }\n}\n",
    "data \"yandex_compute_snapshot_schedule\" \"my_snapshot_schedule\" {\n  snapshot_schedule_id = \"some_snapshot_schedule_id\"\n}\n",
    "data \"yandex_container_registry\" \"source\" {\n  registry_id = \"some_registry_id\"\n}\n",
    "resource \"yandex_container_registry\" \"default\" {\n  name      = \"test-registry\"\n  folder_id = \"test_folder_id\"\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n}\n\ndata \"yandex_container_registry_ip_permission\" \"my_ip_permission_by_id\" {\n  registry_id = yandex_container_registry.default.id\n}\n",
    "data \"yandex_container_repository\" \"repo-1\" {\n  name = \"some_repository_name\"\n}\n\ndata \"yandex_container_repository\" \"repo-2\" {\n  repository_id = \"some_repository_id\"\n}\n",
    "data \"yandex_container_repository_lifecycle_policy\" \"my_lifecycle_policy_by_id\" {\n  lifecycle_policy_id = yandex_container_repository_lifecycle_policy.my_lifecycle_policy.id\n}\n",
    "data \"yandex_dataproc_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"service_account_id\" {\n  value = \"${data.yandex_dataproc_cluster.foo.service_account_id}\"\n}\n",
    "data \"yandex_dns_zone\" \"foo\" {\n  dns_zone_id = yandex_dns_zone.zone1.id\n}\n\noutput \"zone\" {\n  value = data.yandex_dns_zone.foo.zone\n}\n",
    "data \"yandex_function\" \"my_function\" {\n  function_id = \"are1samplefunction11\"\n}\n",
    "data \"yandex_function_scaling_policy\" \"my_scaling_policy\" {\n  function_id = \"are1samplefunction11\"\n}\n",
    "data \"yandex_function_trigger\" \"my_trigger\" {\n  trigger_id = \"are1sampletrigger11\"\n}\n",
    "data \"yandex_iam_policy\" \"admin\" {\n  binding {\n    role = \"admin\"\n\n    members = [\n      \"userAccount:user_id_1\"\n    ]\n  }\n\n  binding {\n    role = \"viewer\"\n\n    members = [\n      \"userAccount:user_id_2\"\n    ]\n  }\n}\n",
    "data \"yandex_iam_role\" \"admin\" {\n  binding {\n    role = \"admin\"\n\n    members = [\n      \"userAccount:user_id_1\"\n    ]\n  }\n}\n",
    "data \"yandex_iam_service_account\" \"builder\" {\n  service_account_id = \"sa_id\"\n}\n\ndata \"yandex_iam_service_account\" \"deployer\" {\n  name = \"sa_name\"\n}\n",
    "data \"yandex_iam_user\" \"admin\" {\n  login = \"my-yandex-login\"\n}\n",
    "data \"yandex_iot_core_broker\" \"my_broker\" {\n  broker_id = \"are1samplebroker11\"\n}\n",
    "data \"yandex_iot_core_device\" \"my_device\" {\n  device_id = \"are1sampleregistry11\"\n}\n",
    "data \"yandex_iot_core_registry\" \"my_registry\" {\n  registry_id = \"are1sampleregistry11\"\n}\n",
    "data \"yandex_kubernetes_cluster\" \"my_cluster\" {\n  cluster_id = \"some_k8s_cluster_id\"\n}\n\noutput \"cluster_external_v4_endpoint\" {\n  value = \"${data.yandex_kubernetes_cluster.my_cluster.master.0.external_v4_endpoint}\"\n}\n",
    "data \"yandex_kubernetes_node_group\" \"my_node_group\" {\n  node_group_id = \"some_k8s_node_group_id\"\n}\n\noutput \"my_node_group.status\" {\n  value = \"${data.yandex_kubernetes_node_group.my_node_group.status}\"\n}\n",
    "data \"yandex_lb_network_load_balancer\" \"foo\" {\n  network_load_balancer_id = \"my-network-load-balancer\"\n}\n",
    "data \"yandex_lb_target_group\" \"foo\" {\n  target_group_id = \"my-target-group-id\"\n}\n",
    "data \"yandex_lockbox_secret\" \"my_secret\" {\n  secret_id = \"some ID\"\n}\n\noutput \"my_secret_created_at\" {\n  value = data.yandex_lockbox_secret.my_secret.created_at\n}\n",
    "data \"yandex_lockbox_secret_version\" \"my_secret_version\" {\n  secret_id = \"some ID\"\n}\n\noutput \"my_secret_entries\" {\n  value = data.yandex_lockbox_secret.my_secret_version.entries\n}\n",
    "data \"yandex_logging_group\" \"my_group\" {\n  group_id = \"some_yandex_logging_group_id\"\n}\n\noutput \"log_group_retention_period\" {\n  value = \"${data.yandex_logging_group.my_group.retention_period}\"\n}\n",
    "data \"yandex_mdb_clickhouse_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_clickhouse_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_elasticsearch_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_elasticsearch_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_greenplum_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_greenplum_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_kafka_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_kafka_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_kafka_connector\" \"foo\" {\n  cluster_id = \"some_cluster_id\"\n  name = \"test\"\n}\n\noutput \"tasks_max\" {\n  value = \"${data.yandex_mdb_kafka_connector.foo.tasks_max}\"\n}\n",
    "data \"yandex_mdb_kafka_topic\" \"foo\" {\n  cluster_id = \"some_cluster_id\"\n  name = \"test\"\n}\n\noutput \"replication_factor\" {\n  value = \"${data.yandex_mdb_kafka_topic.foo.replication_factor}\"\n}\n",
    "data \"yandex_mdb_mongodb_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_mongodb_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_mysql_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_mysql_user\" \"foo\" {\n  cluster_id = \"some_cluster_id\"\n  name       = \"test\"\n}\n\noutput \"permission\" {\n  value = \"${data.yandex_mdb_mysql_user.foo.permission}\"\n}\n",
    "data \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"fqdn\" {\n  value = \"${data.yandex_mdb_postgresql_cluster.foo.host.0.fqdn}\"\n}\n",
    "data \"yandex_mdb_postgresql_database\" \"foo\" {\n  cluster_id = \"some_cluster_id\"\n  name = \"test\"\n}\n\noutput \"owner\" {\n  value = \"${data.yandex_mdb_postgresql_database.foo.owner}\"\n}\n",
    "data \"yandex_mdb_postgresql_user\" \"foo\" {\n  cluster_id = \"some_cluster_id\"\n  name       = \"test\"\n}\n\noutput \"permission\" {\n  value = \"${data.yandex_mdb_postgresql_user.foo.permission}\"\n}\n",
    "data \"yandex_mdb_redis_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_redis_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_mdb_sqlserver_cluster\" \"foo\" {\n  name = \"test\"\n}\n\noutput \"network_id\" {\n  value = \"${data.yandex_mdb_sqlserver_cluster.foo.network_id}\"\n}\n",
    "data \"yandex_message_queue\" \"example_queue\" {\n  name = \"ymq_terraform_example\"\n}\n",
    "data \"yandex_monitoring_dashboard\" \"my_dashboard\" {\n  dashboard_id = \"some_instance_dashboard_id\"\n}\n",
    "data \"yandex_organizationmanager_group\" group {\n  group_id        = \"some_group_id\"\n  organization_id = \"some_organization_id\"\n}\n\noutput \"my_group.name\" {\n  value = \"${data.yandex_organizationmanager_group.group.name}\"\n}\n",
    "data \"yandex_organizationmanager_saml_federation\" federation {\n  federation_id   = \"some_federation_id\"\n  organization_id = \"some_organization_id\"\n}\n\noutput \"my_federation.name\" {\n  value = \"${data.yandex_organizationmanager_saml_federation.federation.name}\"\n}\n",
    "data \"yandex_organizationmanager_saml_federation_user_account\" account {\n  federation_id = \"some_federation_id\"\n  name_id       = \"example@example.org\"\n}\n\noutput \"my_federation.id\" {\n  value = \"${data.yandex_organizationmanager_saml_federation_user_account.account.id}\"\n}\n",
    "data \"yandex_resourcemanager_cloud\" \"foo\" {\n  name = \"foo-cloud\"\n}\n\noutput \"cloud_create_timestamp\" {\n  value = \"${data.yandex_resourcemanager_cloud.foo.created_at}\"\n}\n",
    "# Get folder by ID\ndata \"yandex_resourcemanager_folder\" \"my_folder_1\" {\n  folder_id = \"folder_id_number_1\"\n}\n\n# Get folder by name in specific cloud\ndata \"yandex_resourcemanager_folder\" \"my_folder_2\" {\n  name     = \"folder_name\"\n  cloud_id = \"some_cloud_id\"\n}\n\noutput \"my_folder_1_name\" {\n  value = \"${data.yandex_resourcemanager_folder.my_folder_1.name}\"\n}\n\noutput \"my_folder_2_cloud_id\" {\n  value = \"${data.yandex_resourcemanager_folder.my_folder_2.cloud_id}\"\n}\n\n",
    "data \"yandex_serverless_container\" \"my-container\" {\n  container_id = \"are1samplecontainer11\"\n}\n",
    "data \"yandex_vpc_address\" \"addr\" {\n  address_id = \"my-address-id\"\n}\n",
    "data \"yandex_vpc_gateway\" \"default\" {\n  gateway_id = \"my-gateway-id\"\n}\n",
    "data \"yandex_vpc_network\" \"admin\" {\n  network_id = \"my-network-id\"\n}\n",
    "data \"yandex_vpc_route_table\" \"this\" {\n  route_table_id = \"my-rt-id\"\n}\n",
    "data \"yandex_vpc_security_group\" \"group1\" {\n  security_group_id = \"my-id\"\n}\n",
    "data \"yandex_vpc_security_group\" \"group1\" {\n  name = \"my-group1\"\n}\n",
    "data \"yandex_vpc_security_group_rule\" \"rule1\" {\n  security_group_binding = \"my-sg-id\"\n  rule_id                = \"my-rule-id\"\n}\n",
    "data \"yandex_vpc_subnet\" \"admin\" {\n  subnet_id = \"my-subnet-id\"\n}\n",
    "data \"yandex_ydb_database_dedicated\" \"my_database\" {\n  database_id = \"some_ydb_dedicated_database_id\"\n}\n\noutput \"ydb_api_endpoint\" {\n  value = \"${data.yandex_ydb_database_dedicated.my_database.ydb_api_endpoint}\"\n}\n",
    "data \"yandex_ydb_database_serverless\" \"my_database\" {\n  database_id = \"some_ydb_serverless_database_id\"\n}\n\noutput \"ydb_api_endpoint\" {\n  value = \"${data.yandex_ydb_database_serverless.my_database.ydb_api_endpoint}\"\n}\n",
    "provider \"yandex\" {\n  token     = \"your YC_TOKEN\"\n  folder_id = \"your folder id\"\n  zone      = \"your default zone\"\n}\n",
    "data \"yandex_compute_image\" \"container-optimized-image\" {\n  family    = \"container-optimized-image\"\n}\n",
    "resource \"yandex_compute_instance\" \"instance-based-on-coi\" {\n\n  boot_disk {\n    initialize_params {\n      image_id = data.yandex_compute_image.container-optimized-image.id\n    }\n  }\n  network_interface {\n    subnet_id = \"your subnet id\"\n    nat       = true\n  }\n  resources {\n    cores  = 2\n    memory = 2\n  }\n\n  metadata = {\n    docker-container-declaration = file(\"${path.module}/declaration.yaml\")\n    user-data                    = file(\"${path.module}/cloud_config.yaml\")\n  }\n}\n",
    "output \"external_ip\" {\n  value = yandex_compute_instance.instance-based-on-coi.network_interface.0.nat_ip_address\n}\n",
    "resource \"yandex_compute_instance_group\" \"ig-with-coi\" {\n  name               = \"ig with coi\"\n  folder_id          = \"your folder\"\n  service_account_id = \"your service account id\"\n  instance_template {\n    platform_id = \"standard-v1\"\n    resources {\n      memory = 2\n      cores  = 1\n    }\n    boot_disk {\n      mode = \"READ_WRITE\"\n      initialize_params {\n        image_id = data.yandex_compute_image.container-optimized-image.id\n      }\n    }\n    network_interface {\n      network_id = \"your network id\"\n      subnet_ids = [\"all your subnet ids\"]\n    }\n\n    metadata = {\n      docker-container-declaration = file(\"${path.module}/declaration.yaml\")\n      user-data = file(\"${path.module}/cloud_config.yaml\")\n    }\n    service_account_id = \"The ID of the service account authorized for this instance\"\n  }\n\n  scale_policy {\n    fixed_scale {\n      size = 3\n    }\n  }\n\n  allocation_policy {\n    zones = [\"all your availability zones\"]\n  }\n\n  deploy_policy {\n    max_unavailable = 2\n    max_creating    = 2\n    max_expansion   = 2\n    max_deleting    = 2\n  }\n}\n",
    "resource \"yandex_alb_backend_group\" \"test-backend-group\" {\n  name      = \"my-backend-group\"\n\n  http_backend {\n    name = \"test-http-backend\"\n    weight = 1\n    port = 8080\n    target_group_ids = [\"${yandex_alb_target_group.test-target-group.id}\"]\n    tls {\n      sni = \"backend-domain.internal\"\n    }\n    load_balancing_config {\n      panic_threshold = 50\n    }    \n    healthcheck {\n      timeout = \"1s\"\n      interval = \"1s\"\n      http_healthcheck {\n        path  = \"/\"\n      }\n    }\n    http2 = \"true\"\n  }\n}\n",
    "resource \"yandex_alb_http_router\" \"tf-router\" {\n  name      = \"my-http-router\"\n  labels = {\n    tf-label    = \"tf-label-value\"\n    empty-label = \"\"s\n  }\n}\n",
    "resource \"yandex_alb_load_balancer\" \"test-balancer\" {\n  name        = \"my-load-balancer\"\n\n  network_id  = yandex_vpc_network.test-network.id\n  \n  allocation_policy {\n    location {\n      zone_id   = \"ru-central1-a\"\n      subnet_id = yandex_vpc_subnet.test-subnet.id \n    }\n  }\n  \n  listener {\n    name = \"my-listener\"\n    endpoint {\n      address {\n        external_ipv4_address {\n        }\n      }\n      ports = [ 8080 ]\n    }    \n    http {\n      handler {\n        http_router_id = yandex_alb_http_router.test-router.id\n      }\n    }\n  }\n  \n  log_options {\n    discard_rule {\n      http_code_intervals = [\"2XX\"]\n      discard_percent = 75\n    }\n  }\n}\n",
    "resource \"yandex_alb_target_group\" \"foo\" {\n  name      = \"my-target-group\"\n\n  target {\n    subnet_id = \"${yandex_vpc_subnet.my-subnet.id}\"\n    ip_address   = \"${yandex_compute_instance.my-instance-1.network_interface.0.ip_address}\"\n  }\n\n  target {\n    subnet_id = \"${yandex_vpc_subnet.my-subnet.id}\"\n    ip_address   = \"${yandex_compute_instance.my-instance-2.network_interface.0.ip_address}\"\n  }\n}\n",
    "resource \"yandex_alb_virtual_host\" \"my-virtual-host\" {\n  name      = \"my-virtual-host\"\n  http_router_id = yandex_alb_http_router.my-router.id\n  route {\n    name = \"my-route\"\n    http_route {\n      http_route_action {\n        backend_group_id = yandex_alb_backend_group.my-bg.id\n        timeout = \"3s\"\n      }\n    }\n  }\n}\n",
    "resource \"yandex_api_gateway\" \"test-api-gateway\" {\n  name = \"some_name\"\n  description = \"any description\"\n  labels = {\n    label       = \"label\"\n    empty-label = \"\"\n  }\n  custom_domains {\n    fqdn = \"test.example.com\"\n    certificate_id = \"<certificate_id_from_cert_manager>\"\n  }\n  connectivity {\n    network_id = \"<dynamic network id>\"\n  }\n  spec = <<-EOT\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Test API\npaths:\n  /hello:\n    get:\n      summary: Say hello\n      operationId: hello\n      parameters:\n        - name: user\n          in: query\n          description: User name to appear in greetings\n          required: false\n          schema:\n            type: string\n            default: 'world'\n      responses:\n        '200':\n          description: Greeting\n          content:\n            'text/plain':\n              schema:\n                type: \"string\"\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        http_headers:\n          'Content-Type': \"text/plain\"\n        content:\n          'text/plain': \"Hello again, {user}!\\n\"\nEOT\n}\n",
    "resource \"yandex_billing_cloud_binding\" \"foo\" {\n  billing_account_id = \"foo-ba-id\"\n  cloud_id = \"foo-cloud-id\"\n}\n",
    "resource \"yandex_cdn_origin_group\" \"my_group\" {\n\n    name = \"My Origin group\"\n\n    use_next = true\n\n    origin {\n\t    source = \"ya.ru\"\n    }\n\n    origin {\n\t    source = \"yandex.ru\"\n    }\n\n    origin {\n\t    source = \"goo.gl\"\n    }\n\n    origin {\n\t    source = \"amazon.com\"\n      backup = false\n    }\n}\n",
    "resource \"yandex_cdn_resource\" \"my_resource\" {\n\tcname = \"cdn1.yandex-example.ru\"\n\n\tactive = false\n\n\torigin_protocol = \"https\"\n\n\tsecondary_hostnames = [\"cdn-example-1.yandex.ru\", \"cdn-example-2.yandex.ru\"]\n\n\torigin_group_id = yandex_cdn_origin_group.foo_cdn_group_by_id.id\n\n    options {\n        edge_cache_settings = 345600\n        ignore_cookie = true\n    }\n}\n",
    "resource \"yandex_cm_certificate\" \"example\" {\n  name    = \"example\"\n  domains = [\"example.com\"]\n\n  managed {\n    challenge_type = \"DNS_CNAME\"\n  }\n}\n",
    "resource \"yandex_cm_certificate\" \"example\" {\n  name    = \"example\"\n  domains = [\"one.example.com\", \"two.example.com\"]\n\n  managed {\n    challenge_type  = \"DNS_CNAME\"\n    challenge_count = 2 # for each domain\n  }\n}\n\nresource \"yandex_dns_recordset\" \"example\" {\n  count   = yandex_cm_certificate.example.managed[0].challenge_count\n  zone_id = \"example-zone-id\"\n  name    = yandex_cm_certificate.example.challenges[count.index].dns_name\n  type    = yandex_cm_certificate.example.challenges[count.index].dns_type\n  data    = [yandex_cm_certificate.example.challenges[count.index].dns_value]\n  ttl     = 60\n}\n",
    "resource \"yandex_cm_certificate\" \"example\" {\n  name    = \"example\"\n  domains = [\"example.com\", \"*.example.com\"]\n\n  managed {\n    challenge_type  = \"DNS_CNAME\"\n    challenge_count = 1 # \"example.com\" and \"*.example.com\" has the same DNS_CNAME challenge\n  }\n}\n\nresource \"yandex_dns_recordset\" \"example\" {\n  count   = yandex_cm_certificate.example.managed[0].challenge_count\n  zone_id = \"example-zone-id\"\n  name    = yandex_cm_certificate.example.challenges[count.index].dns_name\n  type    = yandex_cm_certificate.example.challenges[count.index].dns_type\n  data    = [yandex_cm_certificate.example.challenges[count.index].dns_value]\n  ttl     = 60\n}\n",
    "resource \"yandex_cm_certificate\" \"example\" {\n  name    = \"example\"\n  domains = [\"example.com\"]\n\n  self_managed {\n    certificate = \"-----BEGIN CERTIFICATE----- // ... -----END CERTIFICATE----- \\n -----BEGIN CERTIFICATE----- // ... -----END CERTIFICATE-----\"\n    private_key = \"-----BEGIN RSA PRIVATE KEY----- // ... -----END RSA PRIVATE KEY-----\"\n  }\n}\n",
    "resource \"yandex_compute_disk\" \"default\" {\n  name     = \"disk-name\"\n  type     = \"network-ssd\"\n  zone     = \"ru-central1-a\"\n  image_id = \"ubuntu-16.04-v20180727\"\n\n  labels = {\n    environment = \"test\"\n  }\n}\n",
    "resource \"yandex_compute_disk\" \"nr\" {\n  name = \"non-replicated-disk-name\"\n  size = 93 // NB size must be divisible by 93  \n  type = \"network-ssd-nonreplicated\"\n  zone = \"ru-central1-b\"\n\n  disk_placement_policy {\n    disk_placement_group_id = yandex_compute_disk_placement_group.this.id\n  }\n}\n\nresource \"yandex_compute_disk_placement_group\" \"this\" {\n  zone = \"ru-central1-b\"\n}\n",
    "resource \"yandex_compute_disk_placement_group\" \"group1\" {\n  name        = \"test-pg\"\n  folder_id   = \"abc*********123\"\n  description = \"my description\"\n}\n",
    "resource \"yandex_compute_filesystem\" \"default\" {\n  name  = \"fs-name\"\n  type  = \"network-ssd\"\n  zone  = \"ru-central1-a\"\n  size  = 10\n\n  labels = {\n    environment = \"test\"\n  }\n}\n",
    "resource \"yandex_compute_gpu_cluster\" \"default\" {\n  name               = \"gpu-cluster-name\"\n  interconnect_type  = \"infiniband\"\n  zone               = \"ru-central1-a\"\n\n  labels = {\n    environment = \"test\"\n  }\n}\n",
    "resource \"yandex_compute_image\" \"foo-image\" {\n  name       = \"my-custom-image\"\n  source_url = \"https://storage.yandexcloud.net/lucky-images/kube-it.img\"\n}\n\nresource \"yandex_compute_instance\" \"vm\" {\n  name = \"vm-from-custom-image\"\n\n  # // ...\n\n  boot_disk {\n    initialize_params {\n      image_id = \"${yandex_compute_image.foo-image.id}\"\n    }\n  }\n}\n",
    "resource \"yandex_compute_instance\" \"default\" {\n  name        = \"test\"\n  platform_id = \"standard-v1\"\n  zone        = \"ru-central1-a\"\n\n  resources {\n    cores  = 2\n    memory = 4\n  }\n\n  boot_disk {\n    initialize_params {\n      image_id = \"image_id\"\n    }\n  }\n\n  network_interface {\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n\n  metadata = {\n    foo      = \"bar\"\n    ssh-keys = \"ubuntu:${file(\"~/.ssh/id_rsa.pub\")}\"\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_compute_instance_group\" \"group1\" {\n  name                = \"test-ig\"\n  folder_id           = \"${data.yandex_resourcemanager_folder.test_folder.id}\"\n  service_account_id  = \"${yandex_iam_service_account.test_account.id}\"\n  deletion_protection = true\n  instance_template {\n    platform_id = \"standard-v1\"\n    resources {\n      memory = 2\n      cores  = 2\n    }\n    boot_disk {\n      mode = \"READ_WRITE\"\n      initialize_params {\n        image_id = \"${data.yandex_compute_image.ubuntu.id}\"\n        size     = 4\n      }\n    }\n    network_interface {\n      network_id = \"${yandex_vpc_network.my-inst-group-network.id}\"\n      subnet_ids = [\"${yandex_vpc_subnet.my-inst-group-subnet.id}\"]\n    }\n    labels = {\n      label1 = \"label1-value\"\n      label2 = \"label2-value\"\n    }\n    metadata = {\n      foo      = \"bar\"\n      ssh-keys = \"ubuntu:${file(\"~/.ssh/id_rsa.pub\")}\"\n    }\n    network_settings {\n      type = \"STANDARD\"\n    }\n  }\n\n  variables = {\n    test_key1 = \"test_value1\"\n    test_key2 = \"test_value2\"\n  }\n\n  scale_policy {\n    fixed_scale {\n      size = 3\n    }\n  }\n\n  allocation_policy {\n    zones = [\"ru-central1-a\"]\n  }\n\n  deploy_policy {\n    max_unavailable = 2\n    max_creating    = 2\n    max_expansion   = 2\n    max_deleting    = 2\n  }\n}\n",
    "resource \"yandex_compute_placement_group\" \"group1\" {\n  name        = \"test-pg\"\n  folder_id   = \"abc*********123\"\n  description = \"my description\"\n}\n",
    "resource \"yandex_compute_snapshot\" \"default\" {\n  name           = \"test-snapshot\"\n  source_disk_id = \"test_disk_id\"\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n}\n",
    "resource \"yandex_compute_snapshot_schedule\" \"default\" {\n  name           = \"my-name\"\n\n  schedule_policy {\n\texpression = \"0 0 * * *\"\n  }\n\n  snapshot_count = 1\n\n  snapshot_spec {\n\t  description = \"snapshot-description\"\n\t  labels = {\n\t    snapshot-label = \"my-snapshot-label-value\"\n\t  }\n  }\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n\n  disk_ids = [\"test_disk_id\", \"another_test_disk_id\"]\n}\n\nresource \"yandex_compute_snapshot_schedule\" \"default\" {\n  schedule_policy {\n\texpression = \"0 0 * * *\"\n  }\n\n  retention_period = \"12h\"\n\n  snapshot_spec {\n\t  description = \"retention-snapshot\"\n  }\n\n  disk_ids = [\"test_disk_id\", \"another_test_disk_id\"]\n}\n",
    "resource \"yandex_container_registry\" \"default\" {\n  name      = \"test-registry\"\n  folder_id = \"test_folder_id\"\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n}\n",
    "resource yandex_container_registry your-registry {\n  folder_id = \"your-folder-id\"\n  name      = \"registry-name\"\n}\n\nresource \"yandex_container_registry_iam_binding\" \"puller\" {\n  registry_id = yandex_container_registry.your-registry.id\n  role        = \"container-registry.images.puller\"\n\n  members = [\n    \"system:allUsers\",\n  ]\n}\n",
    "resource \"yandex_container_registry\" \"my_registry\" {\n  name = \"test-registry\"\n}\n\nresource \"yandex_container_registry_ip_permission\" \"my_ip_permission\" {\n  registry_id = yandex_container_registry.my_registry.id\n  push        = [ \"10.1.0.0/16\", \"10.2.0.0/16\", \"10.3.0.0/16\" ]\n  pull        = [ \"10.1.0.0/16\", \"10.5.0/16\" ]\n}\n",
    "resource \"yandex_container_registry\" \"my-registry\" {\n  name = \"test-registry\"\n}\n\nresource \"yandex_container_repository\" \"my-repository\" {\n  name = \"${yandex_container_registry.my-registry.id}/test-repository\"\n}\n",
    "resource yandex_container_registry your-registry {\n  folder_id = \"your-folder-id\"\n  name      = \"registry-name\"\n}\n\nresource yandex_container_repository repo-1 {\n  name      = \"${yandex_container_registry.your-registry.id}/repo-1\"\n}\n\nresource \"yandex_container_repository_iam_binding\" \"puller\" {\n  repository_id = yandex_container_repository.repo-1.id\n  role        = \"container-registry.images.puller\"\n\n  members = [\n    \"system:allUsers\",\n  ]\n}\n\ndata \"yandex_container_repository\" \"repo-2\" {\n  name = \"some_repository_name\"\n}\n\nresource \"yandex_container_repository_iam_binding\" \"pusher\" {\n  repository_id = yandex_container_repository.repo-2.id\n  role        = \"container-registry.images.pusher\"\n\n  members = [\n    \"serviceAccount:your-service-account-id\",\n  ]\n}\n",
    "resource \"yandex_container_registry\" \"my_registry\" {\n  name = \"test-registry\"\n}\n\nresource \"yandex_container_repository\" \"my_repository\" {\n  name = \"${yandex_container_registry.my_registry.id}/test-repository\"\n}\n\nresource \"yandex_container_repository_lifecycle_policy\" \"my_lifecycle_policy\" {\n  name          = \"test-lifecycle-policy-name\"\n  status        = \"active\"\n  repository_id = yandex_container_repository.my_repository.id\n\n  rule {\n    description  = \"my description\"\n    untagged     = true\n    tag_regexp   = \".*\"\n    retained_top = 1\n  }\n}\n",
    "resource \"yandex_dataproc_cluster\" \"foo\" {\n  depends_on = [yandex_resourcemanager_folder_iam_binding.dataproc]\n\n  bucket      = yandex_storage_bucket.foo.bucket\n  description = \"Dataproc Cluster created by Terraform\"\n  name        = \"dataproc-cluster\"\n  labels = {\n    created_by = \"terraform\"\n  }\n  service_account_id = yandex_iam_service_account.dataproc.id\n  zone_id            = \"ru-central1-b\"\n\n  cluster_config {\n    # Certain cluster version can be set, but better to use default value (last stable version)\n    # version_id = \"1.4\"\n\n    hadoop {\n      services = [\"HDFS\", \"YARN\", \"SPARK\", \"TEZ\", \"MAPREDUCE\", \"HIVE\"]\n      properties = {\n        \"yarn:yarn.resourcemanager.am.max-attempts\" = 5\n      }\n      ssh_public_keys = [\n      file(\"~/.ssh/id_rsa.pub\")]\n    }\n\n    subcluster_spec {\n      name = \"main\"\n      role = \"MASTERNODE\"\n      resources {\n        resource_preset_id = \"s2.small\"\n        disk_type_id       = \"network-hdd\"\n        disk_size          = 20\n      }\n      subnet_id   = yandex_vpc_subnet.foo.id\n      hosts_count = 1\n    }\n\n    subcluster_spec {\n      name = \"data\"\n      role = \"DATANODE\"\n      resources {\n        resource_preset_id = \"s2.small\"\n        disk_type_id       = \"network-hdd\"\n        disk_size          = 20\n      }\n      subnet_id   = yandex_vpc_subnet.foo.id\n      hosts_count = 2\n    }\n    \n    subcluster_spec {\n      name = \"compute\"\n      role = \"COMPUTENODE\"\n      resources {\n        resource_preset_id = \"s2.small\"\n        disk_type_id       = \"network-hdd\"\n        disk_size          = 20\n      }\n      subnet_id   = yandex_vpc_subnet.foo.id\n      hosts_count = 2\n    }\n    \n    subcluster_spec {\n      name = \"compute_autoscaling\"\n      role = \"COMPUTENODE\"\n      resources {\n        resource_preset_id = \"s2.small\"\n        disk_type_id       = \"network-hdd\"\n        disk_size          = 20\n      }\n      subnet_id   = yandex_vpc_subnet.foo.id\n      hosts_count = 2      \n      autoscaling_config {\n        max_hosts_count = 10\n        measurement_duration = 60\n        warmup_duration = 60\n        stabilization_duration = 120\n        preemptible = false\n        decommission_timeout = 60\n      }\n    }\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-b\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_iam_service_account\" \"dataproc\" {\n  name        = \"dataproc\"\n  description = \"service account to manage Dataproc Cluster\"\n}\n\ndata \"yandex_resourcemanager_folder\" \"foo\" {\n  folder_id = \"some_folder_id\"\n}\n\nresource \"yandex_resourcemanager_folder_iam_binding\" \"dataproc\" {\n  folder_id = data.yandex_resourcemanager_folder.foo.id\n  role      = \"mdb.dataproc.agent\"\n  members = [\n    \"serviceAccount:${yandex_iam_service_account.dataproc.id}\",\n  ]\n}\n\n// required in order to create bucket\nresource \"yandex_resourcemanager_folder_iam_binding\" \"bucket-creator\" {\n  folder_id = data.yandex_resourcemanager_folder.foo.id\n  role      = \"editor\"\n  members = [\n    \"serviceAccount:${yandex_iam_service_account.dataproc.id}\",\n  ]\n}\n\nresource \"yandex_iam_service_account_static_access_key\" \"foo\" {\n  service_account_id = yandex_iam_service_account.dataproc.id\n}\n\nresource \"yandex_storage_bucket\" \"foo\" {\n  depends_on = [\n    yandex_resourcemanager_folder_iam_binding.bucket-creator\n  ]\n\n  bucket     = \"foo\"\n  access_key = yandex_iam_service_account_static_access_key.foo.access_key\n  secret_key = yandex_iam_service_account_static_access_key.foo.secret_key\n}\n",
    "resource \"yandex_datatransfer_endpoint\" \"pg_source\" {\n  name = \"pg-test-source\"\n  settings {\n    postgres_source {\n      connection {\n        on_premise {\n          hosts = [\n            \"example.org\"\n          ]\n          port = 5432\n        }\n      }\n      slot_gigabyte_lag_limit = 100\n      database = \"db1\"\n      user = \"user1\"\n      password {\n        raw = \"123\"\n      }\n    }\n  }\n}\n\nresource \"yandex_datatransfer_endpoint\" \"pg_target\" {\n  folder_id = \"some_folder_id\"\n  name = \"pg-test-target2\"\n  settings {\n    postgres_target {\n      connection {\n        mdb_cluster_id = \"some_cluster_id\"\n      }\n      database = \"db2\"\n      user = \"user2\"\n      password {\n        raw = \"321\"\n      }\n    }\n  }\n}\n",
    "resource \"yandex_datatransfer_endpoint\" \"pg_source\" {\n  name = \"pg-test-source\"\n  settings {\n    postgres_source {\n      connection {\n        on_premise {\n          hosts = [\n            \"example.org\"\n          ]\n          port = 5432\n        }\n      }\n      slot_gigabyte_lag_limit = 100\n      database = \"db1\"\n      user = \"user1\"\n      password {\n        raw = \"123\"\n      }\n    }\n  }\n}\n\nresource \"yandex_datatransfer_endpoint\" \"pg_target\" {\n  folder_id = \"some_folder_id\"\n  name = \"pg-test-target2\"\n  settings {\n    postgres_target {\n      connection {\n        mdb_cluster_id = \"some_cluster_id\"\n      }\n      database = \"db2\"\n      user = \"user2\"\n      password {\n        raw = \"321\"\n      }\n    }\n  }\n}\n\nresource \"yandex_datatransfer_transfer\" \"pgpg_transfer\" {\n  folder_id = \"some_folder_id\"\n  name = \"pgpg\"\n  source_id = yandex_datatransfer_endpoint.pg_source.id\n  target_id = yandex_datatransfer_endpoint.pg_target.id\n  type = \"SNAPSHOT_AND_INCREMENT\"\n}\n",
    "resource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_dns_zone\" \"zone1\" {\n  name        = \"my_private_zone\"\n  description = \"desc\"\n\n  labels = {\n    label1 = \"label-1-value\"\n  }\n\n  zone             = \"example.com.\"\n  public           = false\n  private_networks = [yandex_vpc_network.foo.id]\n}\n\nresource \"yandex_dns_recordset\" \"rs1\" {\n  zone_id = yandex_dns_zone.zone1.id\n  name    = \"srv.example.com.\"\n  type    = \"A\"\n  ttl     = 200\n  data    = [\"10.1.0.1\"]\n}\n\nresource \"yandex_dns_recordset\" \"rs2\" {\n  zone_id = yandex_dns_zone.zone1.id\n  name    = \"srv2\"\n  type    = \"A\"\n  ttl     = 200\n  data    = [\"10.1.0.2\"]\n}\n",
    "resource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_dns_zone\" \"zone1\" {\n  name        = \"my-private-zone\"\n  description = \"desc\"\n\n  labels = {\n    label1 = \"label-1-value\"\n  }\n\n  zone             = \"example.com.\"\n  public           = false\n  private_networks = [yandex_vpc_network.foo.id]\n}\n\nresource \"yandex_dns_recordset\" \"rs1\" {\n  zone_id = yandex_dns_zone.zone1.id\n  name    = \"srv.example.com.\"\n  type    = \"A\"\n  ttl     = 200\n  data    = [\"10.1.0.1\"]\n}\n",
    "resource \"yandex_function\" \"test-function\" {\n  name               = \"some_name\"\n  description        = \"any description\"\n  user_hash          = \"any_user_defined_string\"\n  runtime            = \"python37\"\n  entrypoint         = \"main\"\n  memory             = \"128\"\n  execution_timeout  = \"10\"\n  service_account_id = \"are1service2account3id\"\n  tags               = [\"my_tag\"]\n  secrets {\n    id = \"${yandex_lockbox_secret.secret.id}\"\n    version_id = \"${yandex_lockbox_secret_version.secret_version.id}\"\n    key = \"secret-key\"\n    environment_variable = \"ENV_VARIABLE\"\n  }\n  content {\n    zip_filename = \"function.zip\"\n  }\n}\n",
    "resource \"yandex_function_iam_binding\" \"function-iam\" {\n  function_id = \"your-function-id\"\n  role        = \"serverless.functions.invoker\"\n\n  members = [\n    \"system:allUsers\",\n  ]\n}\n",
    "resource \"yandex_function_scaling_policy\" \"my_scaling_policy\" {\n  function_id = \"are1samplefunction11\"\n  policy {\n    tag = \"$latest\"\n    zone_instances_limit = 3\n    zone_requests_limit  = 100\n  }\n  policy {\n    tag = \"my_tag\"\n    zone_instances_limit = 4\n    zone_requests_limit  = 150\n  }\n}\n",
    "resource \"yandex_function_trigger\" \"my_trigger\" {\n  name        = \"some_name\"\n  description = \"any description\"\n  timer {\n    cron_expression = \"* * * * ? *\"\n  }\n  function {\n    id = \"tf-test\"\n  }\n}\n",
    "resource \"yandex_iam_service_account\" \"sa\" {\n  name        = \"vmmanager\"\n  description = \"service account to manage VMs\"\n}\n",
    "resource \"yandex_iam_service_account_api_key\" \"sa-api-key\" {\n  service_account_id = \"some_sa_id\"\n  description        = \"api key for authorization\"\n  pgp_key            = \"keybase:keybaseusername\"\n}\n",
    "resource \"yandex_iam_service_account_iam_binding\" \"admin-account-iam\" {\n  service_account_id = \"your-service-account-id\"\n  role               = \"admin\"\n\n  members = [\n    \"userAccount:foo_user_id\",\n  ]\n}\n",
    "resource \"yandex_iam_service_account_iam_member\" \"admin-account-iam\" {\n  service_account_id = \"your-service-account-id\"\n  role               = \"admin\"\n  member             = \"userAccount:bar_user_id\"\n}\n",
    "data \"yandex_iam_policy\" \"admin\" {\n  binding {\n    role = \"admin\"\n\n    members = [\n      \"userAccount:foobar_user_id\",\n    ]\n  }\n}\n\nresource \"yandex_iam_service_account_iam_policy\" \"admin-account-iam\" {\n  service_account_id = \"your-service-account-id\"\n  policy_data        = \"${data.yandex_iam_policy.admin.policy_data}\"\n}\n",
    "resource \"yandex_iam_service_account_key\" \"sa-auth-key\" {\n  service_account_id = \"some_sa_id\"\n  description        = \"key for service account\"\n  key_algorithm      = \"RSA_4096\"\n  pgp_key            = \"keybase:keybaseusername\"\n}\n",
    "resource \"yandex_iam_service_account_static_access_key\" \"sa-static-key\" {\n  service_account_id = \"some_sa_id\"\n  description        = \"static access key for object storage\"\n  pgp_key            = \"keybase:keybaseusername\"\n}\n",
    "resource \"yandex_iot_core_broker\" \"my_broker\" {\n  name        = \"some_name\"\n  description = \"any description\"\n  labels = {\n    my-label = \"my-label-value\"\n  }\n  certificates = [\n    \"public part of certificate1\",\n    \"public part of certificate2\"\n  ]\n}\n",
    "resource \"yandex_iot_core_device\" \"my_device\" {\n  registry_id = \"are1sampleregistryid11\"\n  name        = \"some_name\"\n  description = \"any description\"\n  aliases = {\n    \"some_alias1/subtopic\" = \"$devices/{id}/events/somesubtopic\",\n    \"some_alias2/subtopic\" = \"$devices/{id}/events/aaa/bbb\",\n  }\n  passwords = [\n    \"my-password1\",\n    \"my-password2\"\n  ]\n  certificates = [\n    \"public part of certificate1\",\n    \"public part of certificate2\"\n  ]\n}\n",
    "resource \"yandex_iot_core_registry\" \"my_registry\" {\n  name        = \"some_name\"\n  description = \"any description\"\n  labels = {\n    my-label = \"my-label-value\"\n  }\n  passwords = [\n    \"my-password1\",\n    \"my-password2\"\n  ]\n  certificates = [\n    \"public part of certificate1\",\n    \"public part of certificate2\"\n  ]\n}\n",
    "resource \"yandex_kms_symmetric_key\" \"example\" {\n  name        = \"example-symetric-key\"\n  description = \"description for key\"\n}\n\nresource \"yandex_kms_secret_ciphertext\" \"password\" {\n  key_id      = \"${yandex_kms_symmetric_key.example.id}\"\n  aad_context = \"additional authenticated data\"\n  plaintext   = \"strong password\"\n}\n",
    "resource \"yandex_kms_symmetric_key\" \"key-a\" {\n  name              = \"example-symetric-key\"\n  description       = \"description for key\"\n  default_algorithm = \"AES_128\"\n  rotation_period   = \"8760h\" // equal to 1 year\n}\n",
    "resource \"yandex_kms_symmetric_key\" \"your-key\" {\n  folder_id = \"your-folder-id\"\n  name      = \"symmetric-key-name\"\n}\n\nresource \"yandex_kms_symmetric_key_iam_binding\" \"viewer\" {\n  symmetric_key_id = yandex_kms_symmetric_key.your-key.id\n  role             = \"viewer\"\n\n  members = [\n    \"userAccount:foo_user_id\",\n  ]\n}\n",
    "resource \"yandex_kubernetes_cluster\" \"zonal_cluster_resource_name\" {\n  name        = \"name\"\n  description = \"description\"\n\n  network_id = \"${yandex_vpc_network.network_resource_name.id}\"\n\n  master {\n    version = \"1.17\"\n    zonal {\n      zone      = \"${yandex_vpc_subnet.subnet_resource_name.zone}\"\n      subnet_id = \"${yandex_vpc_subnet.subnet_resource_name.id}\"\n    }\n\n    public_ip = true\n\n    security_group_ids = [\"${yandex_vpc_security_group.security_group_name.id}\"]\n\n    maintenance_policy {\n      auto_upgrade = true\n\n      maintenance_window {\n        start_time = \"15:00\"\n        duration   = \"3h\"\n      }\n    }\n    \n    master_logging {\n      enabled = true\n      log_group_id = \"${yandex_logging_group.log_group_resoruce_name.id}\"\n      kube_apiserver_enabled = true\n      cluster_autoscaler_enabled = true\n      events_enabled = true\n    }\n  }\n\n  service_account_id      = \"${yandex_iam_service_account.service_account_resource_name.id}\"\n  node_service_account_id = \"${yandex_iam_service_account.node_service_account_resource_name.id}\"\n\n  labels = {\n    my_key       = \"my_value\"\n    my_other_key = \"my_other_value\"\n  }\n\n  release_channel = \"RAPID\"\n  network_policy_provider = \"CALICO\"\n\n  kms_provider {\n    key_id = \"${yandex_kms_symmetric_key.kms_key_resource_name.id}\"\n  }\n}\n",
    "resource \"yandex_kubernetes_cluster\" \"regional_cluster_resource_name\" {\n  name        = \"name\"\n  description = \"description\"\n\n  network_id = \"${yandex_vpc_network.network_resource_name.id}\"\n\n  master {\n    regional {\n      region = \"ru-central1\"\n\n      location {\n        zone      = \"${yandex_vpc_subnet.subnet_a_resource_name.zone}\"\n        subnet_id = \"${yandex_vpc_subnet.subnet_a_resource_name.id}\"\n      }\n\n      location {\n        zone      = \"${yandex_vpc_subnet.subnet_b_resource_name.zone}\"\n        subnet_id = \"${yandex_vpc_subnet.subnet_b_resource_name.id}\"\n      }\n\n      location {\n        zone      = \"${yandex_vpc_subnet.subnet_c_resource_name.zone}\"\n        subnet_id = \"${yandex_vpc_subnet.subnet_c_resource_name.id}\"\n      }\n    }\n\n    version   = \"1.14\"\n    public_ip = true\n\n    maintenance_policy {\n      auto_upgrade = true\n\n      maintenance_window {\n        day        = \"monday\"\n        start_time = \"15:00\"\n        duration   = \"3h\"\n      }\n\n      maintenance_window {\n        day        = \"friday\"\n        start_time = \"10:00\"\n        duration   = \"4h30m\"\n      }\n    }\n    \n    master_logging {\n      enabled = true\n      folder_id = \"${data.yandex_resourcemanager_folder.folder_resource_name.id}\"\n      kube_apiserver_enabled = true\n      cluster_autoscaler_enabled = true\n      events_enabled = true\n    }\n  }\n\n  service_account_id      = \"${yandex_iam_service_account.service_account_resource_name.id}\"\n  node_service_account_id = \"${yandex_iam_service_account.node_service_account_resource_name.id}\"\n\n  labels = {\n    my_key       = \"my_value\"\n    my_other_key = \"my_other_value\"\n  }\n\n  release_channel = \"STABLE\"\n}\n",
    "depends_on = [\n  \"yandex_resourcemanager_folder_iam_member.ServiceAccountResourceName\",\n  \"yandex_resourcemanager_folder_iam_member.NodeServiceAccountResourceName\"\n]\n",
    "resource \"yandex_kubernetes_node_group\" \"my_node_group\" {\n  cluster_id  = \"${yandex_kubernetes_cluster.my_cluster.id}\"\n  name        = \"name\"\n  description = \"description\"\n  version     = \"1.17\"\n\n  labels = {\n    \"key\" = \"value\"\n  }\n\n  instance_template {\n    platform_id = \"standard-v2\"\n\n    network_interface {\n      nat                = true\n      subnet_ids         = [\"${yandex_vpc_subnet.my_subnet.id}\"]\n    }\n\n    resources {\n      memory = 2\n      cores  = 2\n    }\n\n    boot_disk {\n      type = \"network-hdd\"\n      size = 64\n    }\n\n    scheduling_policy {\n      preemptible = false\n    }\n\n    container_runtime {\n      type = \"containerd\"\n    }\n  }\n\n  scale_policy {\n    fixed_scale {\n      size = 1\n    }\n  }\n\n  allocation_policy {\n    location {\n      zone = \"ru-central1-a\"\n    }\n  }\n\n  maintenance_policy {\n    auto_upgrade = true\n    auto_repair  = true\n\n    maintenance_window {\n      day        = \"monday\"\n      start_time = \"15:00\"\n      duration   = \"3h\"\n    }\n\n    maintenance_window {\n      day        = \"friday\"\n      start_time = \"10:00\"\n      duration   = \"4h30m\"\n    }\n  }\n}\n",
    "resource \"yandex_lb_network_load_balancer\" \"foo\" {\n  name = \"my-network-load-balancer\"\n\n  listener {\n    name = \"my-listener\"\n    port = 8080\n    external_address_spec {\n      ip_version = \"ipv4\"\n    }\n  }\n\n  attached_target_group {\n    target_group_id = \"${yandex_lb_target_group.my-target-group.id}\"\n\n    healthcheck {\n      name = \"http\"\n      http_options {\n        port = 8080\n        path = \"/ping\"\n      }\n    }\n  }\n}\n",
    "resource \"yandex_lb_target_group\" \"foo\" {\n  name      = \"my-target-group\"\n  region_id = \"ru-central1\"\n\n  target {\n    subnet_id = \"${yandex_vpc_subnet.my-subnet.id}\"\n    address   = \"${yandex_compute_instance.my-instance-1.network_interface.0.ip_address}\"\n  }\n\n  target {\n    subnet_id = \"${yandex_vpc_subnet.my-subnet.id}\"\n    address   = \"${yandex_compute_instance.my-instance-2.network_interface.0.ip_address}\"\n  }\n}\n",
    "resource \"yandex_lockbox_secret\" \"my_secret\" {\n  name = \"test secret\"\n}\n",
    "resource \"yandex_lockbox_secret\" \"my_secret\" {\n  name = \"test secret\"\n}\n\nresource \"yandex_lockbox_secret_version\" \"my_version\" {\n  secret_id = yandex_lockbox_secret.my_secret.id\n  entries {\n    key        = \"key1\"\n    text_value = \"value1\" // explicit secret value\n  }\n  entries {\n    key = \"k2\"\n    // value generated by a command won't be visible in Terraform state\n    command {\n      path = \"my_secret_generator.sh\"\n    }\n  }\n}\n",
    "resource \"yandex_logging_group\" \"group1\" {\n  name      = \"test-logging-group\"\n  folder_id = \"${data.yandex_resourcemanager_folder.test_folder.id}\"\n}\n",
    "resource \"yandex_mdb_clickhouse_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n\n  clickhouse {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 32\n    }\n\n    config {\n      log_level                       = \"TRACE\"\n      max_connections                 = 100\n      max_concurrent_queries          = 50\n      keep_alive_timeout              = 3000\n      uncompressed_cache_size         = 8589934592\n      mark_cache_size                 = 5368709120\n      max_table_size_to_drop          = 53687091200\n      max_partition_size_to_drop      = 53687091200\n      timezone                        = \"UTC\"\n      geobase_uri                     = \"\"\n      query_log_retention_size        = 1073741824\n      query_log_retention_time        = 2592000\n      query_thread_log_enabled        = true\n      query_thread_log_retention_size = 536870912\n      query_thread_log_retention_time = 2592000\n      part_log_retention_size         = 536870912\n      part_log_retention_time         = 2592000\n      metric_log_enabled              = true\n      metric_log_retention_size       = 536870912\n      metric_log_retention_time       = 2592000\n      trace_log_enabled               = true\n      trace_log_retention_size        = 536870912\n      trace_log_retention_time        = 2592000\n      text_log_enabled                = true\n      text_log_retention_size         = 536870912\n      text_log_retention_time         = 2592000\n      text_log_level                  = \"TRACE\"\n      background_pool_size            = 16\n      background_schedule_pool_size   = 16\n\n      merge_tree {\n        replicated_deduplication_window                           = 100\n        replicated_deduplication_window_seconds                   = 604800\n        parts_to_delay_insert                                     = 150\n        parts_to_throw_insert                                     = 300\n        max_replicated_merges_in_queue                            = 16\n        number_of_free_entries_in_pool_to_lower_max_size_of_merge = 8\n        max_bytes_to_merge_at_min_space_in_pool                   = 1048576\n      }\n\n      kafka {\n        security_protocol = \"SECURITY_PROTOCOL_PLAINTEXT\"\n        sasl_mechanism    = \"SASL_MECHANISM_GSSAPI\"\n        sasl_username     = \"user1\"\n        sasl_password     = \"pass1\"\n      }\n\n      kafka_topic {\n        name = \"topic1\"\n        settings {\n          security_protocol = \"SECURITY_PROTOCOL_SSL\"\n          sasl_mechanism    = \"SASL_MECHANISM_SCRAM_SHA_256\"\n          sasl_username     = \"user2\"\n          sasl_password     = \"pass2\"\n        }\n      }\n\n      kafka_topic {\n        name = \"topic2\"\n        settings {\n          security_protocol = \"SECURITY_PROTOCOL_SASL_PLAINTEXT\"\n          sasl_mechanism    = \"SASL_MECHANISM_PLAIN\"\n        }\n      }\n\n      rabbitmq {\n        username = \"rabbit_user\"\n        password = \"rabbit_pass\"\n      }\n\n      compression {\n        method              = \"LZ4\"\n        min_part_size       = 1024\n        min_part_size_ratio = 0.5\n      }\n\n      compression {\n        method              = \"ZSTD\"\n        min_part_size       = 2048\n        min_part_size_ratio = 0.7\n      }\n\n      graphite_rollup {\n        name = \"rollup1\"\n        pattern {\n          regexp   = \"abc\"\n          function = \"func1\"\n          retention {\n            age       = 1000\n            precision = 3\n          }\n        }\n      }\n\n      graphite_rollup {\n        name = \"rollup2\"\n        pattern {\n          function = \"func2\"\n          retention {\n            age       = 2000\n            precision = 5\n          }\n        }\n      }\n    }\n  }\n\n  database {\n    name = \"db_name\"\n  }\n\n  user {\n    name     = \"user\"\n    password = \"your_password\"\n    permission {\n      database_name = \"db_name\"\n    }\n    settings {\n      max_memory_usage_for_user               = 1000000000\n      read_overflow_mode                      = \"throw\"\n      output_format_json_quote_64bit_integers = true\n    }\n    quota {\n      interval_duration = 3600000\n      queries           = 10000\n      errors            = 1000\n    }\n    quota {\n      interval_duration = 79800000\n      queries           = 50000\n      errors            = 5000\n    }\n  }\n\n  host {\n    type      = \"CLICKHOUSE\"\n    zone      = \"ru-central1-a\"\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n\n  format_schema {\n    name = \"test_schema\"\n    type = \"FORMAT_SCHEMA_TYPE_CAPNPROTO\"\n    uri  = \"https://storage.yandexcloud.net/ch-data/schema.proto\"\n  }\n\n  ml_model {\n    name = \"test_model\"\n    type = \"ML_MODEL_TYPE_CATBOOST\"\n    uri  = \"https://storage.yandexcloud.net/ch-data/train.csv\"\n  }\n  \n  service_account_id = \"your_service_account_id\"\n  \n  cloud_storage {\n    enabled = false\n  }\n\n  maintenance_window {\n    type = \"ANYTIME\"\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_clickhouse_cluster\" \"foo\" {\n  name        = \"ha\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n\n  clickhouse {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n  }\n\n  zookeeper {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 10\n    }\n  }\n\n  database {\n    name = \"db_name\"\n  }\n\n  user {\n    name     = \"user\"\n    password = \"password\"\n    permission {\n      database_name = \"db_name\"\n    }\n    settings {\n      max_memory_usage_for_user               = 1000000000\n      read_overflow_mode                      = \"throw\"\n      output_format_json_quote_64bit_integers = true\n    }\n    quota {\n      interval_duration = 3600000\n      queries           = 10000\n      errors            = 1000\n    }\n    quota {\n      interval_duration = 79800000\n      queries           = 50000\n      errors            = 5000\n    }\n  }\n\n  host {\n    type      = \"CLICKHOUSE\"\n    zone      = \"ru-central1-a\"\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n\n  host {\n    type      = \"CLICKHOUSE\"\n    zone      = \"ru-central1-b\"\n    subnet_id = \"${yandex_vpc_subnet.bar.id}\"\n  }\n\n  host {\n    type      = \"ZOOKEEPER\"\n    zone      = \"ru-central1-a\"\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n\n  host {\n    type      = \"ZOOKEEPER\"\n    zone      = \"ru-central1-b\"\n    subnet_id = \"${yandex_vpc_subnet.bar.id}\"\n  }\n\n  host {\n    type      = \"ZOOKEEPER\"\n    zone      = \"ru-central1-c\"\n    subnet_id = \"${yandex_vpc_subnet.baz.id}\"\n  }\n   \n  cloud_storage {\n    enabled = false\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"baz\" {\n  zone           = \"ru-central1-c\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.3.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_clickhouse_cluster\" \"foo\" {\n  name        = \"sharded\"\n  environment = \"PRODUCTION\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n\n  clickhouse {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n  }\n\n  zookeeper {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 10\n    }\n  }\n\n  database {\n    name = \"db_name\"\n  }\n\n  user {\n    name     = \"user\"\n    password = \"password\"\n    permission {\n      database_name = \"db_name\"\n    }\n    settings {\n      max_memory_usage_for_user               = 1000000000\n      read_overflow_mode                      = \"throw\"\n      output_format_json_quote_64bit_integers = true\n    }\n    quota {\n      interval_duration = 3600000\n      queries           = 10000\n      errors            = 1000\n    }\n    quota {\n      interval_duration = 79800000\n      queries           = 50000\n      errors            = 5000\n    }\n  }\n  \n  shard {\n    name = \"shard1\"\n    weight = 110\n  }\n  \n  shard {\n    name = \"shard2\"\n    weight = 300\n  }\n\n  host {\n    type       = \"CLICKHOUSE\"\n    zone       = \"ru-central1-a\"\n    subnet_id  = \"${yandex_vpc_subnet.foo.id}\"\n    shard_name = \"shard1\"\n  }\n\n  host {\n    type       = \"CLICKHOUSE\"\n    zone       = \"ru-central1-b\"\n    subnet_id  = \"${yandex_vpc_subnet.bar.id}\"\n    shard_name = \"shard1\"\n  }\n\n  host {\n    type       = \"CLICKHOUSE\"\n    zone       = \"ru-central1-b\"\n    subnet_id  = \"${yandex_vpc_subnet.bar.id}\"\n    shard_name = \"shard2\"\n  }\n\n  host {\n    type       = \"CLICKHOUSE\"\n    zone       = \"ru-central1-c\"\n    subnet_id  = \"${yandex_vpc_subnet.baz.id}\"\n    shard_name = \"shard2\"\n  }\n\n  shard_group {\n    name        = \"single_shard_group\"\n    description = \"Cluster configuration that contain only shard1\"\n    shard_names = [\n      \"shard1\",\n    ]\n  }\n  \n  cloud_storage {\n    enabled = false\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"baz\" {\n  zone           = \"ru-central1-c\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.3.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_elasticsearch_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n\n  config {\n\n    admin_password = \"super-password\"\n\n    data_node {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-ssd\"\n        disk_size          = 100\n      }\n    }\n\n  }\n\n  host {\n    name = \"node\"\n    zone = \"ru-central1-a\"\n    type = \"DATA_NODE\"\n    assign_public_ip = true\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n\n  maintenance_window {\n    type = \"ANYTIME\"\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "locals {\n  zones = [\n    \"ru-central1-a\",\n    \"ru-central1-b\",\n    \"ru-central1-c\",\n  ]\n}\n\nresource \"yandex_mdb_elasticsearch_cluster\" \"foo\" {\n  name        = \"my-cluster\"\n  environment = \"PRODUCTION\"\n  network_id  = \"${yandex_vpc_network.es-net.id}\"\n\n  config {\n\n    edition = \"platinum\"\n\n    admin_password = \"super-password\"\n\n    data_node {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-ssd\"\n        disk_size          = 100\n      }\n    }\n\n    master_node {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-ssd\"\n        disk_size          = 10\n      }\n    }\n\n    plugins = [\"analysis-icu\"]\n\n  }\n\n  dynamic \"host\" {\n    for_each = toset(range(0,6))\n    content {\n      name = \"datanode${host.value}\"\n      zone = local.zones[(host.value)%3]\n      type = \"DATA_NODE\"\n      assign_public_ip = true\n    }\n  }\n\n  dynamic \"host\" {\n    for_each = toset(range(0,3))\n    content {\n      name = \"masternode${host.value}\"\n      zone = local.zones[host.value%3]\n      type = \"MASTER_NODE\"\n    }\n  }\n\n  depends_on = [\n    yandex_vpc_subnet.es-subnet-a,\n    yandex_vpc_subnet.es-subnet-b,\n    yandex_vpc_subnet.es-subnet-c,\n  ]\n\n}\n\nresource \"yandex_vpc_network\" \"es-net\" {}\n\nresource \"yandex_vpc_subnet\" \"es-subnet-a\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.es-net.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"es-subnet-b\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.es-net.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"es-subnet-c\" {\n  zone           = \"ru-central1-c\"\n  network_id     = \"${yandex_vpc_network.es-net.id}\"\n  v4_cidr_blocks = [\"10.3.0.0/24\"]\n}\n\n",
    "resource \"yandex_mdb_greenplum_cluster\" \"foo\" {\n  name               = \"test\"\n  description        = \"test greenplum cluster\"\n  environment        = \"PRESTABLE\"\n  network_id         = yandex_vpc_network.foo.id\n  zone_id            = \"ru-central1-a\"\n  subnet_id          = yandex_vpc_subnet.foo.id\n  assign_public_ip   = true\n  version            = \"6.19\"\n  master_host_count  = 2\n  segment_host_count = 5\n  segment_in_host    = 1\n  master_subcluster {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_size          = 24\n      disk_type_id       = \"network-ssd\"\n    }\n  }\n  segment_subcluster {\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_size          = 24\n      disk_type_id       = \"network-ssd\"\n    }\n  }\n\n  access {\n    web_sql = true\n  }\n\n  greenplum_config = {\n    max_connections                   = 395\n    gp_workfile_compression           = \"false\"\n  }\n\n  user_name     = \"admin_user\"\n  user_password = \"your_super_secret_password\"\n\n  security_group_ids = [yandex_vpc_security_group.test-sg-x.id]\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n\nresource \"yandex_vpc_security_group\" \"test-sg-x\" {\n  network_id = yandex_vpc_network.foo.id\n  ingress {\n    protocol       = \"ANY\"\n    description    = \"Allow incoming traffic from members of the same security group\"\n    from_port      = 0\n    to_port        = 65535\n    v4_cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  egress {\n    protocol       = \"ANY\"\n    description    = \"Allow outgoing traffic to members of the same security group\"\n    from_port      = 0\n    to_port        = 65535\n    v4_cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n",
    "resource \"yandex_mdb_kafka_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n  subnet_ids  = [\"${yandex_vpc_subnet.foo.id}\"]\n\n  config {\n    version          = \"2.8\"\n    brokers_count    = 1\n    zones            = [\"ru-central1-a\"]\n    assign_public_ip = false\n    unmanaged_topics = false\n    schema_registry  = false\n    kafka {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-ssd\"\n        disk_size          = 32\n      }\n      kafka_config {\n        compression_type                = \"COMPRESSION_TYPE_ZSTD\"\n        log_flush_interval_messages     = 1024\n        log_flush_interval_ms           = 1000\n        log_flush_scheduler_interval_ms = 1000\n        log_retention_bytes             = 1073741824\n        log_retention_hours             = 168\n        log_retention_minutes           = 10080\n        log_retention_ms                = 86400000\n        log_segment_bytes               = 134217728\n        log_preallocate                 = true \n        num_partitions                  = 10\n        default_replication_factor      = 1\n        message_max_bytes               = 1048588\n        replica_fetch_max_bytes         = 1048576\n        ssl_cipher_suites               = [\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\", \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"]\n        offsets_retention_minutes       = 10080\n        sasl_enabled_mechanisms         = [\"SASL_MECHANISM_SCRAM_SHA_256\", \"SASL_MECHANISM_SCRAM_SHA_512\"]\n      }\n    }\n  }\n\n  user {\n    name     = \"producer-application\"\n    password = \"password\"\n    permission {\n      topic_name = \"input\"\n      role = \"ACCESS_ROLE_PRODUCER\"\n    }\n  }\n\n  user {\n    name     = \"worker\"\n    password = \"password\"\n    permission {\n      topic_name = \"input\"\n      role = \"ACCESS_ROLE_CONSUMER\"\n    }\n    permission {\n      topic_name = \"output\"\n      role = \"ACCESS_ROLE_PRODUCER\"\n    }\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_kafka_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n  subnet_ids  = [\"${yandex_vpc_subnet.foo.id}\", \"${yandex_vpc_subnet.bar.id}\", \"${yandex_vpc_subnet.baz.id}\"]\n\n  config {\n    version          = \"2.8\"\n    brokers_count    = 2\n    zones            = [\"ru-central1-a\", \"ru-central1-b\", \"ru-central1-c\"]\n    assign_public_ip = true\n    unmanaged_topics = false\n    schema_registry  = false\n    kafka {\n      resources {\n        resource_preset_id = \"s2.medium\"\n        disk_type_id       = \"network-ssd\"\n        disk_size          = 128\n      }\n      kafka_config {\n        compression_type                = \"COMPRESSION_TYPE_ZSTD\"\n        log_flush_interval_messages     = 1024\n        log_flush_interval_ms           = 1000\n        log_flush_scheduler_interval_ms = 1000\n        log_retention_bytes             = 1073741824\n        log_retention_hours             = 168\n        log_retention_minutes           = 10080\n        log_retention_ms                = 86400000\n        log_segment_bytes               = 134217728\n        log_preallocate                 = true\n        num_partitions                  = 10\n        default_replication_factor      = 6\n        message_max_bytes               = 1048588\n        replica_fetch_max_bytes         = 1048576\n        ssl_cipher_suites               = [\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\", \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"]\n        offsets_retention_minutes       = 10080\n        sasl_enabled_mechanisms         = [\"SASL_MECHANISM_SCRAM_SHA_256\", \"SASL_MECHANISM_SCRAM_SHA_512\"]\n      }\n    }\n    zookeeper {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-ssd\"\n        disk_size          = 20\n      }\n    }\n  }\n\n  user {\n    name     = \"producer-application\"\n    password = \"password\"\n    permission {\n      topic_name = \"input\"\n      role = \"ACCESS_ROLE_PRODUCER\"\n    }\n  }\n\n  user {\n    name     = \"worker\"\n    password = \"password\"\n    permission {\n      topic_name = \"input\"\n      role = \"ACCESS_ROLE_CONSUMER\"\n    }\n    permission {\n      topic_name = \"output\"\n      role = \"ACCESS_ROLE_PRODUCER\"\n    }\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"baz\" {\n  zone           = \"ru-central1-c\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.3.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_kafka_cluster\" \"foo\" {\n  name       = \"foo\"\n  network_id = \"c64vs98keiqc7f24pvkd\"\n\n  config {\n    version = \"2.8\"\n    zones   = [\"ru-central1-a\"]\n    kafka {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-hdd\"\n        disk_size          = 16\n      }\n    }\n  }\n}\n\nresource \"yandex_mdb_kafka_connector\" \"connector\" {\n  cluster_id = yandex_mdb_kafka_cluster.foo.id\n  name       = \"replication\"\n  tasks_max  = 3\n  properties = {\n    refresh.topics.enabled = \"true\"\n  }\n  connector_config_mirrormaker {\n    topics             = \"data.*\"\n    replication_factor = 1\n    source_cluster {\n      alias = \"source\"\n      external_cluster {\n        bootstrap_servers = \"somebroker1:9091,somebroker2:9091\"\n        sasl_username     = \"someuser\"\n        sasl_password     = \"somepassword\"\n        sasl_mechanism    = \"SCRAM-SHA-512\"\n        security_protocol = \"SASL_SSL\"\n      }\n    }\n    target_cluster {\n      alias = \"target\"\n      this_cluster {}\n    }\n  }\n}\n\nresource \"yandex_mdb_kafka_connector\" \"connector\" {\n  cluster_id = yandex_mdb_kafka_cluster.foo.id\n  name       = \"s3-sink\"\n  tasks_max  = 3\n  properties = {\n    \"key.converter\"                  = \"org.apache.kafka.connect.storage.StringConverter\"\n    \"value.converter\"                = \"org.apache.kafka.connect.json.JsonConverter\"\n    \"value.converter.schemas.enable\" = \"false\"\n    \"format.output.type\"             = \"jsonl\"\n    \"file.name.template\"             = \"dir1/dir2/{{topic}}-{{partition:padding=true}}-{{start_offset:padding=true}}.gz\"\n    \"timestamp.timezone\"             = \"Europe/Moscow\"\n  }\n  connector_config_s3_sink {\n    topics                = \"data.*\"\n    file_compression_type = \"gzip\"\n    file_max_records      = 100\n    s3_connection {\n      bucket_name = \"somebucket\"\n      external_s3 {\n        endpoint          = \"storage.yandexcloud.net\"\n        access_key_id     = \"some_access_key_id\"\n        secret_access_key = \"some_secret_access_key\"\n      }\n    }\n  }\n}\n",
    "resource \"yandex_mdb_kafka_cluster\" \"foo\" {\n  name        = \"foo\"\n  network_id  = \"c64vs98keiqc7f24pvkd\"\n\n  config {\n    version          = \"2.8\"\n    zones            = [\"ru-central1-a\"]\n    unmanaged_topics = true\n    kafka {\n      resources {\n        resource_preset_id = \"s2.micro\"\n        disk_type_id       = \"network-hdd\"\n        disk_size          = 16\n      }\n    }\n  }\n}\n\nresource \"yandex_mdb_kafka_topic\" events {\n  cluster_id         = yandex_mdb_kafka_cluster.foo.id\n  name               = \"events\"\n  partitions         = 4\n  replication_factor = 1\n  topic_config {\n    cleanup_policy        = \"CLEANUP_POLICY_COMPACT\"\n    compression_type      = \"COMPRESSION_TYPE_LZ4\"\n    delete_retention_ms   = 86400000\n    file_delete_delay_ms  = 60000\n    flush_messages        = 128\n    flush_ms              = 1000\n    min_compaction_lag_ms = 0\n    retention_bytes       = 10737418240\n    retention_ms          = 604800000\n    max_message_bytes     = 1048588\n    min_insync_replicas   = 1\n    segment_bytes         = 268435456\n    preallocate           = true\n  }\n}\n",
    "resource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_mdb_mongodb_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n\n  cluster_config {\n    version = \"4.2\"\n  }\n\n  labels = {\n    test_key = \"test_value\"\n  }\n\n  database {\n    name = \"testdb\"\n  }\n\n  user {\n    name     = \"john\"\n    password = \"password\"\n    permission {\n      database_name = \"testdb\"\n    }\n  }\n\n  resources_mongod {\n    resource_preset_id = \"s2.small\"\n    disk_size          = 16\n    disk_type_id       = \"network-hdd\"\n  }\n\n  resources_mongos {\n    resource_preset_id = \"s2.small\"\n    disk_size          = 14\n    disk_type_id       = \"network-hdd\"\n  }\n\n  resources_mongocfg {\n    resource_preset_id = \"s2.small\"\n    disk_size          = 14\n    disk_type_id       = \"network-hdd\"\n  }\n\n  host {\n    zone_id   = \"ru-central1-a\"\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n  \n  maintenance_window {\n    type = \"ANYTIME\"\n  }\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  mysql_config = {\n    sql_mode                      = \"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\"\n    max_connections               = 100\n    default_authentication_plugin = \"MYSQL_NATIVE_PASSWORD\"\n    innodb_print_all_deadlocks    = true\n\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  maintenance_window {\n    type = \"WEEKLY\"\n    day  = \"SAT\"\n    hour = 12\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n\n  host {\n    zone      = \"ru-central1-b\"\n    subnet_id = yandex_vpc_subnet.bar.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  maintenance_window {\n    type = \"WEEKLY\"\n    day  = \"SAT\"\n    hour = 12\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    name      = \"na-1\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n  host {\n    zone      = \"ru-central1-a\"\n    name      = \"na-2\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n  host {\n    zone                    = \"ru-central1-b\"\n    name                    = \"nb-1\"\n    replication_source_name = \"na-1\"\n    subnet_id               = yandex_vpc_subnet.bar.id\n  }\n  host {\n    zone                    = \"ru-central1-b\"\n    name                    = \"nb-2\"\n    replication_source_name = \"nb-1\"\n    subnet_id               = yandex_vpc_subnet.bar.id\n  }\n  \n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  maintenance_window {\n    type = \"WEEKLY\"\n    day  = \"SAT\"\n    hour = 12\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    name      = \"na-1\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n  host {\n    zone            = \"ru-central1-b\"\n    name            = \"nb-1\"\n    backup_priority = 5\n    subnet_id       = yandex_vpc_subnet.bar.id\n  }\n  host {\n    zone            = \"ru-central1-b\"\n    name            = \"nb-2\"\n    backup_priority = 10\n    subnet_id       = yandex_vpc_subnet.bar.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  maintenance_window {\n    type = \"WEEKLY\"\n    day  = \"SAT\"\n    hour = 12\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    name      = \"na-1\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n  host {\n    zone            = \"ru-central1-b\"\n    name            = \"nb-1\"\n    priority        = 5\n    subnet_id       = yandex_vpc_subnet.bar.id\n  }\n  host {\n    zone            = \"ru-central1-b\"\n    name            = \"nb-2\"\n    priority        = 10\n    subnet_id       = yandex_vpc_subnet.bar.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  maintenance_window {\n    type = \"ANYTIME\"\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  restore {\n    backup_id   = \"c9qj2tns23432471d9qha:stream_20210122T141717Z\"\n    time = \"2021-01-23T15:04:05\"\n  }\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_database\" \"foo\" {\n  cluster_id = yandex_mdb_mysql_cluster.foo.id\n  name       = \"testdb\"\n}\n\nresource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"8.0\"\n\n  resources {\n    resource_preset_id = \"s2.micro\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 16\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_mysql_user\" \"john\" {\n\tcluster_id = yandex_mdb_mysql_cluster.foo.id\n    name       = \"john\"\n    password   = \"password\"\n\n    permission {\n      database_name = yandex_mdb_mysql_database.testdb.name\n      roles         = [\"ALL\"]\n    }\n\n    permission {\n      database_name = yandex_mdb_mysql_database.new_testdb.name\n      roles         = [\"ALL\", \"INSERT\"]\n    }\n\n\tconnection_limits {\n\t  max_questions_per_hour   = 10\n\t  max_updates_per_hour     = 20\n\t  max_connections_per_hour = 30\n\t  max_user_connections     = 40\n\t}\n    \n\tglobal_permissions = [\"PROCESS\"]\n\n\tauthentication_plugin = \"SHA256_PASSWORD\"\n}\n\nresource \"yandex_mdb_mysql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  config {\n    version = 14\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  config {\n    version = 15\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n    postgresql_config = {\n      max_connections                   = 395\n      enable_parallel_hash              = true\n      autovacuum_vacuum_scale_factor    = 0.34\n      default_transaction_isolation     = \"TRANSACTION_ISOLATION_READ_COMMITTED\"\n      shared_preload_libraries          = \"SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN\"\n    }\n  }\n\n  maintenance_window {\n    type = \"WEEKLY\"\n    day  = \"SAT\"\n    hour = 12\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name        = \"ha\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  config {\n    version = 15\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n  }\n\n  maintenance_window {\n    type = \"ANYTIME\"\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n\n  host {\n    zone      = \"ru-central1-b\"\n    subnet_id = yandex_vpc_subnet.bar.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n",
    "\nresource \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name        = \"test_ha\"\n  description = \"test High-Availability (HA) PostgreSQL Cluster with priority and set master\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  host_master_name = \"host_name_c_2\"\n\n  config {\n    version = 15\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_size          = 10\n      disk_type_id       = \"network-ssd\"\n    }\n\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    name      = \"host_name_a\"\n    priority  = 2\n    subnet_id = yandex_vpc_subnet.a.id\n  }\n  host {\n    zone                    = \"ru-central1-b\"\n    name                    = \"host_name_b\"\n    replication_source_name = \"host_name_c\"\n    subnet_id               = yandex_vpc_subnet.b.id\n  }\n  host {\n    zone      = \"ru-central1-c\"\n    name      = \"host_name_c\"\n    subnet_id = yandex_vpc_subnet.c.id\n  }\n  host {\n    zone      = \"ru-central1-c\"\n    name      = \"host_name_c_2\"\n    subnet_id = yandex_vpc_subnet.c.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"a\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"b\" {\n  zone           = \"ru-central1-b\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"c\" {\n  zone           = \"ru-central1-c\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.3.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  restore {\n    backup_id = \"c9q99999999999999994cm:base_000000010000005F000000B4\"\n    time      = \"2021-02-11T15:04:05\"\n  }\n\n  config {\n    version = 15\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n    postgresql_config = {\n      max_connections                   = 395\n      enable_parallel_hash              = true\n      autovacuum_vacuum_scale_factor    = 0.34\n      default_transaction_isolation     = \"TRANSACTION_ISOLATION_READ_COMMITTED\"\n      shared_preload_libraries          = \"SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN\"\n    }\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_postgresql_database\" \"foo\" {\n  cluster_id = yandex_mdb_postgresql_cluster.foo.id\n  name       = \"testdb\"\n  owner      = yandex_mdb_postgresql_user.alice.name\n  lc_collate = \"en_US.UTF-8\"\n  lc_type    = \"en_US.UTF-8\"\n  extension {\n    name = \"uuid-ossp\"\n  }\n  extension {\n    name = \"xml2\"\n  }\n}\n\nresource \"yandex_mdb_postgresql_user\" \"foo\" {\n  cluster_id = yandex_mdb_postgresql_cluster.foo.id\n  name       = \"alice\"\n  password   = \"password\"\n}\n\nresource \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  config {\n    version = 15\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_postgresql_user\" \"foo\" {\n  cluster_id = yandex_mdb_postgresql_cluster.foo.id\n  name       = \"alice\"\n  password   = \"password\"\n  conn_limit = 50\n  settings = {\n    default_transaction_isolation = \"read committed\"\n    log_min_duration_statement    = 5000\n  }\n}\n\nresource \"yandex_mdb_postgresql_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n\n  config {\n    version = 15\n    resources {\n      resource_preset_id = \"s2.micro\"\n      disk_type_id       = \"network-ssd\"\n      disk_size          = 16\n    }\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_redis_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n\n  config {\n    password = \"your_password\"\n    version  = \"6.2\"\n  }\n\n  resources {\n    resource_preset_id = \"hm1.nano\"\n    disk_size          = 16\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = \"${yandex_vpc_subnet.foo.id}\"\n  }\n  \n  maintenance_window {\n    type = \"ANYTIME\"\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_redis_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = \"${yandex_vpc_network.foo.id}\"\n  sharded     = true\n\n  config {\n    version  = \"6.2\"\n    password = \"your_password\"\n  }\n\n  resources {\n    resource_preset_id = \"hm1.nano\"\n    disk_size          = 16\n  }\n\n  host {\n    zone       = \"ru-central1-a\"\n    subnet_id  = \"${yandex_vpc_subnet.foo.id}\"\n    shard_name = \"first\"\n  }\n\n  host {\n    zone       = \"ru-central1-b\"\n    subnet_id  = \"${yandex_vpc_subnet.bar.id}\"\n    shard_name = \"second\"\n  }\n\n  host {\n    zone       = \"ru-central1-c\"\n    subnet_id  = \"${yandex_vpc_subnet.baz.id}\"\n    shard_name = \"third\"\n  }\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.1.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"bar\" {\n  zone           = \"ru-central1-b\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.2.0.0/24\"]\n}\n\nresource \"yandex_vpc_subnet\" \"baz\" {\n  zone           = \"ru-central1-c\"\n  network_id     = \"${yandex_vpc_network.foo.id}\"\n  v4_cidr_blocks = [\"10.3.0.0/24\"]\n}\n",
    "resource \"yandex_mdb_sqlserver_cluster\" \"foo\" {\n  name        = \"test\"\n  environment = \"PRESTABLE\"\n  network_id  = yandex_vpc_network.foo.id\n  version     = \"2016sp2std\"\n\n  resources {\n    resource_preset_id = \"s2.small\"\n    disk_type_id       = \"network-ssd\"\n    disk_size          = 20\n  }\n\n  labels = { test_key : \"test_value\" }\n\n  backup_window_start {\n    hours   = 20\n    minutes = 30\n  }\n\n  sqlserver_config = {\n    fill_factor_percent           = 49\n    optimize_for_ad_hoc_workloads = true\n  }\n\n  database {\n    name = \"db_name_a\"\n  }\n  database {\n    name = \"db_name\"\n  }\n  database {\n    name = \"db_name_b\"\n  }\n\n  user {\n    name     = \"bob\"\n    password = \"mysecurepassword\"\n  }\n\n  user {\n    name     = \"alice\"\n    password = \"mysecurepassword\"\n\n    permission {\n      database_name = \"db_name\"\n      roles         = [\"DDLADMIN\"]\n    }\n  }\n\n  user {\n    name     = \"chuck\"\n    password = \"mysecurepassword\"\n\n    permission {\n      database_name = \"db_name_a\"\n      roles         = [\"OWNER\"]\n    }\n    permission {\n      database_name = \"db_name\"\n      roles         = [\"OWNER\", \"DDLADMIN\"]\n    }\n    permission {\n      database_name = \"db_name_b\"\n      roles         = [\"OWNER\", \"DDLADMIN\"]\n    }\n  }\n\n  host {\n    zone      = \"ru-central1-a\"\n    subnet_id = yandex_vpc_subnet.foo.id\n  }\n\n  security_group_ids = [yandex_vpc_security_group.test-sg-x.id]\n  host_group_ids = [ \"host_group_1\", \"host_group_2\" ]\n}\n\nresource \"yandex_vpc_network\" \"foo\" {}\n\nresource \"yandex_vpc_subnet\" \"foo\" {\n  zone           = \"ru-central1-a\"\n  network_id     = yandex_vpc_network.foo.id\n  v4_cidr_blocks = [\"10.5.0.0/24\"]\n}\n\nresource \"yandex_vpc_security_group\" \"test-sg-x\" {\n  network_id = yandex_vpc_network.foo.id\n  ingress {\n    protocol       = \"ANY\"\n    description    = \"Allow incoming traffic from members of the same security group\"\n    from_port      = 0\n    to_port        = 65535\n    v4_cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  egress {\n    protocol       = \"ANY\"\n    description    = \"Allow outgoing traffic to members of the same security group\"\n    from_port      = 0\n    to_port        = 65535\n    v4_cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n",
    "resource \"yandex_message_queue\" \"example_queue\" {\n  name                        = \"ymq_terraform_example\"\n  visibility_timeout_seconds  = 600\n  receive_wait_time_seconds   = 20\n  message_retention_seconds   = 1209600\n  redrive_policy              = jsonencode({\n    deadLetterTargetArn = yandex_message_queue.example_deadletter_queue.arn\n    maxReceiveCount     = 3\n  })\n}\n\nresource \"yandex_message_queue\" \"example_deadletter_queue\" {\n  name                        = \"ymq_terraform_deadletter_example\"\n}\n",
    "resource \"yandex_message_queue\" \"example_fifo_queue\" {\n  name                        = \"ymq_terraform_fifo_example.fifo\"\n  fifo_queue                  = true\n  content_based_deduplication = true\n}\n",
    "resource \"yandex_monitoring_dashboard\" \"my-dashboard\" {\n  name        = \"local-id-resource\"\n  description = \"Description\"\n  title       = \"My title\"\n  labels      = {\n    a = \"b\"\n  }\n  parametrization {\n    selectors = \"a=b\"\n    parameters {\n      description = \"param1 description\"\n      title       = \"title\"\n      hidden      = false\n      id          = \"param1\"\n      custom {\n        default_values  = [\"1\", \"2\"]\n        values          = [\"1\", \"2\", \"3\"]\n        multiselectable = true\n      }\n    }\n    parameters {\n      hidden = true\n      id     = \"param2\"\n      label_values {\n        default_values  = [\"1\", \"2\"]\n        multiselectable = true\n        label_key       = \"key\"\n        selectors       = \"a=b\"\n      }\n    }\n    parameters {\n      hidden = true\n      id     = \"param3\"\n      text {\n        default_value = \"abc\"\n      }\n    }\n  }\n  widgets {\n    text {\n      text = \"text here\"\n    }\n    position {\n      h = 1\n      w = 1\n      x = 4\n      y = 4\n    }\n  }\n  widgets {\n    chart {\n      description    = \"chart description\"\n      title          = \"title for chart\"\n      chart_id       = \"chart1id\"\n      display_legend = true\n      freeze         = \"FREEZE_DURATION_HOUR\"\n      name_hiding_settings {\n        names    = [\"a\", \"b\"]\n        positive = true\n      }\n      queries {\n        downsampling {\n          disabled         = false\n          gap_filling      = \"GAP_FILLING_NULL\"\n          grid_aggregation = \"GRID_AGGREGATION_COUNT\"\n          max_points       = 100\n        }\n        target {\n          hidden    = true\n          text_mode = true\n          query     = \"{service=monitoring}\"\n        }\n      }\n      series_overrides {\n        name = \"name\"\n        settings {\n          color          = \"colorValue\"\n          grow_down      = true\n          name           = \"series_overrides name\"\n          type           = \"SERIES_VISUALIZATION_TYPE_LINE\"\n          yaxis_position = \"YAXIS_POSITION_LEFT\"\n          stack_name     = \"stack name\"\n        }\n      }\n      visualization_settings {\n        aggregation = \"SERIES_AGGREGATION_AVG\"\n        interpolate = \"INTERPOLATE_LEFT\"\n        type        = \"VISUALIZATION_TYPE_POINTS\"\n        normalize   = true\n        show_labels = true\n        title       = \"visualization_settings title\"\n        color_scheme_settings {\n          gradient {\n            green_value  = \"11\"\n            red_value    = \"22\"\n            violet_value = \"33\"\n            yellow_value = \"44\"\n          }\n        }\n        heatmap_settings {\n          green_value  = \"1\"\n          red_value    = \"2\"\n          violet_value = \"3\"\n          yellow_value = \"4\"\n        }\n        yaxis_settings {\n          left {\n            max         = \"111\"\n            min         = \"11\"\n            title       = \"yaxis_settings left title\"\n            precision   = 3\n            type        = \"YAXIS_TYPE_LOGARITHMIC\"\n            unit_format = \"UNIT_CELSIUS\"\n          }\n          right {\n            max         = \"22\"\n            min         = \"2\"\n            title       = \"yaxis_settings right title\"\n            precision   = 2\n            type        = \"YAXIS_TYPE_LOGARITHMIC\"\n            unit_format = \"UNIT_NONE\"\n          }\n        }\n      }\n    }\n    position {\n      h = 100\n      w = 100\n      x = 6\n      y = 6\n    }\n  }\n  widgets {\n    title {\n      text = \"title here\"\n      size = \"TITLE_SIZE_XS\"\n    }\n    position {\n      h = 1\n      w = 1\n      x = 1\n      y = 1\n    }\n  }\n}\n",
    "resource \"yandex_organizationmanager_group\" group {\n  name            = \"my-group\"\n  description     = \"My new Group\"\n  organization_id = \"sdf4*********3fr\"\n}\n",
    "resource \"yandex_organizationmanager_group_iam_member\" \"editor\" {\n  group_id = \"some_group_id\"\n  role     = \"editor\"\n  member   = \"userAccount:user_id\"\n}\n",
    "resource \"yandex_organizationmanager_group_membership\" group {\n  group_id = \"sdf4*********3fr\"\n  members  = [\n    \"xdf********123\"\n  ]\n}\n",
    "resource \"yandex_organizationmanager_organization_iam_binding\" \"editor\" {\n  organization_id = \"some_organization_id\"\n\n  role = \"editor\"\n\n  members = [\n    \"userAccount:some_user_id\",\n  ]\n}\n",
    "resource \"yandex_organizationmanager_organization_iam_member\" \"editor\" {\n  organization_id = \"some_organization_id\"\n  role            = \"editor\"\n  member          = \"userAccount:user_id\"\n}\n",
    "resource \"yandex_organizationmanager_saml_federation\" federation {\n  name            = \"my-federation\"\n  description     = \"My new SAML federation\"\n  organization_id = \"sdf4*********3fr\"\n  sso_url         = \"https://my-sso.url\"\n  issuer          = \"my-issuer\"\n  sso_binding     = \"POST\"\n}\n",
    "resource \"yandex_resourcemanager_cloud\" \"cloud1\" {\n  organization_id = \"my_organization_id\"\n}\n",
    "data \"yandex_resourcemanager_cloud\" \"project1\" {\n  name = \"Project 1\"\n}\n\nresource \"yandex_resourcemanager_cloud_iam_binding\" \"admin\" {\n  cloud_id = \"${data.yandex_resourcemanager_cloud.project1.id}\"\n\n  role = \"editor\"\n\n  members = [\n    \"userAccount:some_user_id\",\n  ]\n}\n",
    "data \"yandex_resourcemanager_cloud\" \"department1\" {\n  name = \"Department 1\"\n}\n\nresource \"yandex_resourcemanager_cloud_iam_member\" \"admin\" {\n  cloud_id = \"${data.yandex_resourcemanager_cloud.department1.id}\"\n  role     = \"editor\"\n  member   = \"userAccount:user_id\"\n}\n",
    "resource \"yandex_resourcemanager_folder\" \"folder1\" {\n  cloud_id = \"my_cloud_id\"\n}\n",
    "data \"yandex_resourcemanager_folder\" \"project1\" {\n  folder_id = \"some_folder_id\"\n}\n\nresource \"yandex_resourcemanager_folder_iam_binding\" \"admin\" {\n  folder_id = \"${data.yandex_resourcemanager_folder.project1.id}\"\n\n  role = \"editor\"\n\n  members = [\n    \"userAccount:some_user_id\",\n  ]\n}\n",
    "data \"yandex_resourcemanager_folder\" \"department1\" {\n  folder_id = \"some_folder_id\"\n}\n\nresource \"yandex_resourcemanager_folder_iam_member\" \"admin\" {\n  folder_id = \"${data.yandex_resourcemanager.department1.name}\"\n\n  role   = \"editor\"\n  member = \"userAccount:user_id\"\n}\n",
    "data \"yandex_resourcemanager_folder\" \"project1\" {\n  folder_id = \"my_folder_id\"\n}\n\ndata \"yandex_iam_policy\" \"admin\" {\n  binding {\n    role = \"editor\"\n\n    members = [\n      \"userAccount:some_user_id\",\n    ]\n  }\n}\n\nresource \"yandex_resourcemanager_folder_iam_policy\" \"folder_admin_policy\" {\n  folder_id   = \"${data.yandex_folder.project1.id}\"\n  policy_data = \"${data.yandex_iam_policy.admin.policy_data}\"\n}\n",
    "resource \"yandex_serverless_container\" \"test-container\" {\n  name               = \"some_name\"\n  description        = \"any description\"\n  memory             = 256\n  execution_timeout  = \"15s\"\n  cores              = 1\n  core_fraction      = 100\n  service_account_id = \"are1service2account3id\"\n  secrets {\n    id = \"${yandex_lockbox_secret.secret.id}\"\n    version_id = \"${yandex_lockbox_secret_version.secret_version.id}\"\n    key = \"secret-key\"\n    environment_variable = \"ENV_VARIABLE\"\n  }\n  image {\n    url = \"cr.yandex/yc/test-image:v1\"\n  }\n}\n",
    "resource \"yandex_serverless_container\" \"test-container-with-digest\" {\n name   = \"some_name\"\n memory = 128\n image {\n  url    = \"cr.yandex/yc/test-image:v1\"\n  digest = \"sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\"\n }\n}\n",
    "resource \"yandex_serverless_container_iam_binding\" \"container-iam\" {\n  container_id = \"your-container-id\"\n  role        = \"serverless.containers.invoker\"\n\n  members = [\n    \"system:allUsers\",\n  ]\n}\n",
    "locals {\n  folder_id = \"<folder-id>\"\n}\n\nprovider \"yandex\" {\n  folder_id = local.folder_id\n  zone      = \"ru-central1-a\"\n}\n\n// Create SA\nresource \"yandex_iam_service_account\" \"sa\" {\n  folder_id = local.folder_id\n  name      = \"tf-test-sa\"\n}\n\n// Grant permissions\nresource \"yandex_resourcemanager_folder_iam_member\" \"sa-editor\" {\n  folder_id = local.folder_id\n  role      = \"storage.editor\"\n  member    = \"serviceAccount:${yandex_iam_service_account.sa.id}\"\n}\n\n// Create Static Access Keys\nresource \"yandex_iam_service_account_static_access_key\" \"sa-static-key\" {\n  service_account_id = yandex_iam_service_account.sa.id\n  description        = \"static access key for object storage\"\n}\n\n// Use keys to create bucket\nresource \"yandex_storage_bucket\" \"test\" {\n  access_key = yandex_iam_service_account_static_access_key.sa-static-key.access_key\n  secret_key = yandex_iam_service_account_static_access_key.sa-static-key.secret_key\n  bucket = \"tf-test-bucket\"\n}\n",
    "resource \"yandex_storage_bucket\" \"test\" {\n  bucket = \"storage-website-test.hashicorp.com\"\n  acl    = \"public-read\"\n\n  website {\n    index_document = \"index.html\"\n    error_document = \"error.html\"\n    routing_rules = <<EOF\n[{\n    \"Condition\": {\n        \"KeyPrefixEquals\": \"docs/\"\n    },\n    \"Redirect\": {\n        \"ReplaceKeyPrefixWith\": \"documents/\"\n    }\n}]\nEOF\n  }\n\n}\n",
    "resource \"yandex_storage_bucket\" \"test\" {\n  bucket = \"mybucket\"\n\n  grant {\n    id          = \"myuser\"\n    type        = \"CanonicalUser\"\n    permissions = [\"FULL_CONTROL\"]\n  }\n\n  grant {\n    type        = \"Group\"\n    permissions = [\"READ\", \"WRITE\"]\n    uri         = \"http://acs.amazonaws.com/groups/global/AllUsers\"\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"s3-website-test.hashicorp.com\"\n  acl    = \"public-read\"\n\n  cors_rule {\n    allowed_headers = [\"*\"]\n    allowed_methods = [\"PUT\", \"POST\"]\n    allowed_origins = [\"https://s3-website-test.hashicorp.com\"]\n    expose_headers  = [\"ETag\"]\n    max_age_seconds = 3000\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-tf-test-bucket\"\n  acl    = \"private\"\n\n  versioning {\n    enabled = true\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-tf-test-bucket\"\n  acl    = \"private\"\n\n  versioning {\n    enabled = true\n  }\n\n  object_lock_configuration {\n    object_lock_enabled = \"Enabled\"\n    rule {\n      default_retention {\n        mode = \"GOVERNANCE\"\n        years = 1\n      }\n    }\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"log_bucket\" {\n  bucket = \"my-tf-log-bucket\"\n}\n\nresource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-tf-test-bucket\"\n  acl    = \"private\"\n\n  logging {\n    target_bucket = yandex_storage_bucket.log_bucket.id\n    target_prefix = \"log/\"\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"bucket\" {\n  bucket = \"my-bucket\"\n  acl    = \"private\"\n\n  lifecycle_rule {\n    id      = \"log\"\n    enabled = true\n\n    prefix = \"log/\"\n\n    transition {\n      days          = 30\n      storage_class = \"COLD\"\n    }\n\n    expiration {\n      days = 90\n    }\n  }\n\n  lifecycle_rule {\n    id      = \"tmp\"\n    prefix  = \"tmp/\"\n    enabled = true\n\n    expiration {\n      date = \"2020-12-21\"\n    }\n  }\n}\n\nresource \"yandex_storage_bucket\" \"versioning_bucket\" {\n  bucket = \"my-versioning-bucket\"\n  acl    = \"private\"\n\n  versioning {\n    enabled = true\n  }\n\n  lifecycle_rule {\n    prefix  = \"config/\"\n    enabled = true\n\n    noncurrent_version_transition {\n      days          = 30\n      storage_class = \"COLD\"\n    }\n\n    noncurrent_version_expiration {\n      days = 90\n    }\n  }\n}\n",
    "resource \"yandex_kms_symmetric_key\" \"key-a\" {\n  name              = \"example-symetric-key\"\n  description       = \"description for key\"\n  default_algorithm = \"AES_128\"\n  rotation_period   = \"8760h\" // equal to 1 year\n}\n\nresource \"yandex_storage_bucket\" \"test\" {\n  bucket = \"mybucket\"\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = yandex_kms_symmetric_key.key-a.id\n        sse_algorithm     = \"aws:kms\"\n      }\n    }\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-policy-bucket\"\n\n  policy = <<POLICY\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    }\n  ]\n}\nPOLICY\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-policy-bucket\"\n\n  max_size = 1048576\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-policy-bucket\"\n\n  folder_id = \"<folder_id>\"\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-policy-bucket\"\n\n  anonymous_access_flags {\n    read = true\n    list = false\n    config_read = true\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-policy-bucket\"\n\n  https {\n    certificate_id = \"<certificate_id_from_certificate_manager>\"\n  }\n}\n",
    "resource \"yandex_storage_bucket\" \"b\" {\n  bucket = \"my-policy-bucket\"\n\n  default_storage_class = \"COLD\"\n}\n",
    "provider \"yandex\" {\n  token = \"<iam-token>\"\n  folder_id = \"<folder-id>\"\n  storage_access_key = \"<storage-access-key>\"\n  storage_secret_key = \"<storage-secret-key>\"\n}\n\nresource \"yandex_storage_bucket\" \"log_bucket\" {\n  bucket = \"my-tf-log-bucket\"\n\n  lifecycle_rule {\n    id      = \"cleanupoldlogs\"\n    enabled = true\n    expiration {\n      days = 365\n    }\n  }\n}\n\nresource \"yandex_kms_symmetric_key\" \"key-a\" {\n  name              = \"example-symetric-key\"\n  description       = \"description for key\"\n  default_algorithm = \"AES_128\"\n  rotation_period   = \"8760h\" // equal to 1 year\n}\n\nresource \"yandex_storage_bucket\" \"all_settings\" {\n  bucket = \"example-tf-settings-bucket\"\n  website {\n    index_document = \"index.html\"\n    error_document = \"error.html\"\n  }\n\n  lifecycle_rule {\n    id = \"test\"\n    enabled = true\n    prefix = \"prefix/\"\n    expiration {\n      days = 30\n    }\n  }\n  lifecycle_rule {\n    id      = \"log\"\n    enabled = true\n\n    prefix = \"log/\"\n\n    transition {\n      days          = 30\n      storage_class = \"COLD\"\n    }\n\n    expiration {\n      days = 90\n    }\n  }\n\n  lifecycle_rule {\n    id      = \"everything180\"\n    prefix  = \"\"\n    enabled = true\n\n    expiration {\n      days = 180\n    }\n  }\n  lifecycle_rule {\n    id      = \"cleanupoldversions\"\n    prefix  = \"config/\"\n    enabled = true\n\n    noncurrent_version_transition {\n      days          = 30\n      storage_class = \"COLD\"\n    }\n\n    noncurrent_version_expiration {\n      days = 90\n    }\n  }\n  lifecycle_rule {\n    id      = \"abortmultiparts\"\n    prefix  = \"\"\n    enabled = true\n    abort_incomplete_multipart_upload_days = 7\n  }\n\n  cors_rule {\n    allowed_headers = [\"*\"]\n    allowed_methods = [\"GET\", \"PUT\"]\n    allowed_origins = [\"https://storage-cloud.example.com\"]\n    expose_headers  = [\"ETag\"]\n    max_age_seconds = 3000\n  }\n\n  versioning {\n    enabled = true\n  }\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = yandex_kms_symmetric_key.key-a.id\n        sse_algorithm     = \"aws:kms\"\n      }\n    }\n  }\n\n  logging {\n    target_bucket = yandex_storage_bucket.log_bucket.id\n    target_prefix = \"tf-logs/\"\n  }\n\n  max_size = 1024\n\n  folder_id = \"<folder_id>\"\n\n  default_storage_class = \"COLD\"\n\n  anonymous_access_flags {\n    read = true\n    list = true\n  }\n\n  https = {\n    certificate_id = \"<certificate_id>\"\n  }\n}\n",
    "resource \"yandex_storage_object\" \"cute-cat-picture\" {\n  bucket = \"cat-pictures\"\n  key    = \"cute-cat\"\n  source = \"/images/cats/cute-cat.jpg\"\n}\n",
    "resource \"yandex_vpc_address\" \"addr\" {\n  name = \"exampleAddress\"\n\n  external_ipv4_address {\n    zone_id = \"ru-central1-a\"\n  }\n}\n",
    "resource \"yandex_vpc_address\" \"vpnaddr\" {\n  name = \"vpnaddr\"\n\n  external_ipv4_address {\n    zone_id                  = \"ru-central1-a\"\n    ddos_protection_provider = \"qrator\"\n  }\n}\n",
    "resource \"yandex_vpc_network\" \"lab-net\" {\n  name = \"lab-network\"\n}\n\nresource \"yandex_vpc_default_security_group\" \"default-sg\" {\n  description = \"description for default security group\"\n  network_id  = \"${yandex_vpc_network.lab-net.id}\"\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n\n  ingress {\n    protocol       = \"TCP\"\n    description    = \"rule1 description\"\n    v4_cidr_blocks = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n    port           = 8080\n  }\n\n  egress {\n    protocol       = \"ANY\"\n    description    = \"rule2 description\"\n    v4_cidr_blocks = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n    from_port      = 8090\n    to_port        = 8099\n  }\n\n  egress {\n    protocol       = \"UDP\"\n    description    = \"rule3 description\"\n    v4_cidr_blocks = [\"10.0.1.0/24\"]\n    from_port      = 8090\n    to_port        = 8099\n  }\n}\n",
    "resource \"yandex_vpc_gateway\" \"default\" {\n  name = \"foobar\"\n  shared_egress_gateway {}\n}\n",
    "resource \"yandex_vpc_network\" \"default\" {\n  name = \"foobar\"\n}\n",
    "resource \"yandex_vpc_network\" \"lab-net\" {\n  name = \"lab-network\"\n}\n\nresource \"yandex_vpc_gateway\" \"egress-gateway\" {\n  name = \"egress-gateway\"\n  shared_egress_gateway {}\n}\n\nresource \"yandex_vpc_route_table\" \"lab-rt-a\" {\n  network_id = \"${yandex_vpc_network.lab-net.id}\"\n\n  static_route {\n    destination_prefix = \"10.2.0.0/16\"\n    next_hop_address   = \"172.16.10.10\"\n  }\n\n  static_route {\n    destination_prefix = \"0.0.0.0/0\"\n    gateway_id         = \"${yandex_vpc_gateway.egress-gateway.id}\"\n  }\n}\n",
    "resource \"yandex_vpc_network\" \"lab-net\" {\n  name = \"lab-network\"\n}\n\nresource \"yandex_vpc_security_group\" \"group1\" {\n  name        = \"My security group\"\n  description = \"description for my security group\"\n  network_id  = \"${yandex_vpc_network.lab-net.id}\"\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n\n  ingress {\n    protocol       = \"TCP\"\n    description    = \"rule1 description\"\n    v4_cidr_blocks = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n    port           = 8080\n  }\n\n  egress {\n    protocol       = \"ANY\"\n    description    = \"rule2 description\"\n    v4_cidr_blocks = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n    from_port      = 8090\n    to_port        = 8099\n  }\n\n  egress {\n    protocol       = \"UDP\"\n    description    = \"rule3 description\"\n    v4_cidr_blocks = [\"10.0.1.0/24\"]\n    from_port      = 8090\n    to_port        = 8099\n  }\n}\n",
    "resource \"yandex_vpc_network\" \"lab-net\" {\n  name = \"lab-network\"\n}\n\nresource \"yandex_vpc_security_group\" \"group1\" {\n  name        = \"My security group\"\n  description = \"description for my security group\"\n  network_id  = \"${yandex_vpc_network.lab-net.id}\"\n\n  labels = {\n    my-label = \"my-label-value\"\n  }\n}\n\nresource \"yandex_vpc_security_group_rule\" \"rule1\" {\n  security_group_binding = yandex_vpc_security_group.group1.id\n  direction              = \"ingress\"\n  description            = \"rule1 description\"\n  v4_cidr_blocks         = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  port                   = 8080\n  protocol               = \"TCP\"\n}\n\nresource \"yandex_vpc_security_group_rule\" \"rule2\" {\n  security_group_binding = yandex_vpc_security_group.group1.id\n  direction              = \"egress\"\n  description            = \"rule2 description\"\n  v4_cidr_blocks         = [\"10.0.1.0/24\"]\n  from_port              = 8090\n  to_port                = 8099\n  protocol               = \"UDP\"\n}\n",
    "resource \"yandex_vpc_network\" \"lab-net\" {\n  name = \"lab-network\"\n}\n\nresource \"yandex_vpc_subnet\" \"lab-subnet-a\" {\n  v4_cidr_blocks = [\"10.2.0.0/16\"]\n  zone           = \"ru-central1-a\"\n  network_id     = \"${yandex_vpc_network.lab-net.id}\"\n}\n",
    "resource \"yandex_ydb_database_dedicated\" \"database1\" {\n  name      = \"test-ydb-dedicated\"\n  folder_id = \"${data.yandex_resourcemanager_folder.test_folder.id}\"\n\n  network_id = \"${yandex_vpc_network.my-inst-group-network.id}\"\n  subnet_ids = [\"${yandex_vpc_subnet.my-inst-group-subnet.id}\"]\n\n  resource_preset_id  = \"medium\"\n  deletion_protection = true\n\n  scale_policy {\n    fixed_scale {\n      size = 1\n    }\n  }\n\n  storage_config {\n    group_count     = 1\n    storage_type_id = \"ssd\"\n  }\n\n  location {\n    region {\n      id = \"ru-central1\"\n    }\n  }\n}\n",
    "resource \"yandex_ydb_database_serverless\" \"database1\" {\n  name      = \"test-ydb-serverless\"\n  folder_id = data.yandex_resourcemanager_folder.test_folder.id\n}\n\nresource \"yandex_ydb_database_iam_binding\" \"viewer\" {\n  database_id = yandex_ydb_database_serverless.database1.id\n  role        = \"ydb.viewer\"\n\n  members = [\n    \"userAccount:foo_user_id\",\n  ]\n}\n",
    "resource \"yandex_ydb_database_serverless\" \"database1\" {\n  name      = \"test-ydb-serverless\"\n  folder_id = \"${data.yandex_resourcemanager_folder.test_folder.id}\"\n\n  deletion_protection = true\n}\n",
    "resource \"yandex_ydb_database_serverless\" \"database_name\" {\n  name = \"database-name\"\n  location_id = \"ru-central1\"\n}\n\n\nresource \"yandex_ydb_topic\" \"topic\" {\n  database_endpoint = \"${yandex_ydb_database_serverless.database_name.ydb_full_endpoint}\"\n  name = \"topic-test\"\n\n  supported_codecs = [\"raw\", \"gzip\"]\n  partitions_count = 1\n  retention_period_ms = 2000000\n  consumer {\n    name                          = \"consumer-name\"\n    supported_codecs              = [\"raw\", \"gzip\"]\n    starting_message_timestamp_ms = 0\n  }\n}\n\n"
]